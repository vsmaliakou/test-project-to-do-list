{"version":3,"sources":["Common/Loading/Loading.module.css","Common/Search/Search.module.css","Todolist/ToDoList.module.css","Common/AddItemForm/AddItemForm.module.css","Task/Task.module.css","Common/Header/Header.module.css","Common/EditableSpan/EditableSpan.module.css","Login/Login.module.css","Todolist/todolist-api.ts","App/app-reducer.ts","Common/Loading/Loading.tsx","Common/Header/Header.tsx","Common/Search/selectors.ts","Task/task-api.ts","Common/Search/Search.tsx","Common/AddItemForm/AddItemForm.tsx","Common/EditableSpan/EditableSpan.tsx","Task/Task.tsx","Todolist/todolists-reducer.ts","Task/tasks-reducer.ts","Todolist/ToDoList.tsx","Todolist/TodolistList.tsx","Login/Login.tsx","App/App.tsx","reportWebVitals.ts","store.ts","index.tsx"],"names":["module","exports","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","id","delete","title","post","put","authAPI","email","password","rememberMe","slice","createSlice","name","initialState","status","error","isLoggedIn","isInitialized","reducers","setAppStatusAC","state","action","payload","setAppErrorAC","setIsLoggedInAC","value","setAppInitializedAC","appReducer","reducer","actions","Loading","className","s","loadingWrap","cssloadDots","cssloadDot","version","xmlns","in","result","stdDeviation","mode","values","in2","Header","dispatch","useDispatch","header","onClick","then","res","data","resultCode","catch","message","TaskStatuses","TaskPriorities","Search","allTasks","useSelector","Object","keys","tasks","forEach","key","prop","hasOwnProperty","tsks","selectAllTasks","useState","taskTitle","setTaskTitle","display","setDisplay","filteredTasks","filter","at","toLowerCase","includes","searchContainer","type","placeholder","onChange","e","currentTarget","onBlur","style","height","overflowY","map","ft","search","searchNone","AddItemForm","React","memo","props","setError","addTask","trim","length","addItem","addItemForm","onKeyPress","charCode","EditableSpan","editMode","setEditMode","setTitle","input","autoFocus","onDoubleClick","tasksAPI","todolistId","taskId","model","Task","changeTasksStatus","useCallback","task","checked","Completed","New","changeTaskTitle","newTitle","removeTask","removeTodolistAC","index","findIndex","t","splice","addTodolistAC","unshift","todolist","changeTodolistTitleAC","setTodolistsAC","todolists","todolistsReducer","removeTaskAC","addTaskAC","todoListId","updateTaskAC","setTasksAC","extraReducers","builder","addCase","tasksReducer","updateTaskTC","getState","find","apiModel","description","priority","startDate","deadline","response","console","warn","ToDoList","useEffect","items","changeTodolistTitle","todolistHeader","removeTodolist","TodolistList","app","removeTaskTC","item","addTaskTC","removeTodolistTC","addTodolist","addTodolistTC","changeTodolistTitleTC","tasksForTodolist","to","Login","setEmail","setPassword","loginPage","loginTC","App","finally","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6c75f163.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loadingWrap\":\"Loading_loadingWrap__3Oauo\",\"cssloadDots\":\"Loading_cssloadDots__L69ls\",\"cssloadDot\":\"Loading_cssloadDot__4ceA2\",\"cssload-dot-colors\":\"Loading_cssload-dot-colors__3Y3qe\",\"cssload-dot-rotate-1\":\"Loading_cssload-dot-rotate-1__LYv1g\",\"cssload-dot-move\":\"Loading_cssload-dot-move__mj87V\",\"cssload-dot-rotate-2\":\"Loading_cssload-dot-rotate-2__1yaub\",\"cssload-dot-rotate-3\":\"Loading_cssload-dot-rotate-3__1d8uA\",\"cssload-dot-rotate-4\":\"Loading_cssload-dot-rotate-4__1jLBX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchContainer\":\"Search_searchContainer__394EE\",\"search\":\"Search_search__10182\",\"searchNone\":\"Search_searchNone__39bun\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolist\":\"ToDoList_todolist__c_duG\",\"todolistHeader\":\"ToDoList_todolistHeader__1lk3E\",\"title\":\"ToDoList_title__1BWso\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addItemForm\":\"AddItemForm_addItemForm__1azhY\",\"error\":\"AddItemForm_error__24L5a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskTitle\":\"Task_taskTitle__2q8f6\",\"title\":\"Task_title__2y6H7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__UG-kB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"EditableSpan_input__SMM0g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginPage\":\"Login_loginPage__3QmN5\"};","import axios from 'axios'\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '15f7a0a9-64c3-4a6a-9f8f-a55a7d8541a6'\r\n    }\r\n})\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>('todo-lists');\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title});\r\n    }\r\n}\r\nexport const authAPI = {\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post<ResponseType<{ userId: number }>>('auth/login', {email, password, rememberMe})\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<AuthMeResponseType>>('auth/me')\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login')\r\n    },\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\ntype AuthMeResponseType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {authAPI} from \"../Todolist/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'loading' as RequestStatusType,\r\n    error: null as string | null,\r\n    isLoggedIn: false,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState,\r\n    reducers: {\r\n        setAppStatusAC: (state, action: PayloadAction<{ status: RequestStatusType }>) => {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC: (state, action: PayloadAction<{ error: string | null }>) => {\r\n            state.error = action.payload.error\r\n        },\r\n        setIsLoggedInAC(state, action: PayloadAction<{value: boolean}>) {\r\n            state.isLoggedIn = action.payload.value\r\n        },\r\n        setAppInitializedAC(state, action: PayloadAction<{ isInitialized: boolean }>) {\r\n            state.isInitialized = action.payload.isInitialized\r\n        }\r\n    }\r\n})\r\nexport const appReducer = slice.reducer\r\n\r\nexport const {setAppStatusAC, setAppErrorAC, setIsLoggedInAC, setAppInitializedAC} = slice.actions\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}));\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            }\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppInitializedAC({isInitialized: true}));\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n}\r\nexport const loginTC = (email: string, password: string, rememberMe: boolean) => (dispatch: Dispatch) => {\r\n    authAPI.login(email, password, rememberMe)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            }  else {\r\n                dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n                dispatch(setAppStatusAC({status: 'failed'}))\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            dispatch(setAppErrorAC({error: error.message}))\r\n            dispatch(setAppStatusAC({status: 'failed'}))\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: false}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n                dispatch(setAppStatusAC({status: 'failed'}))\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            dispatch(setAppErrorAC({error: error.message}))\r\n            dispatch(setAppStatusAC({status: 'failed'}))\r\n        })\r\n}","import React from 'react';\r\nimport s from './Loading.module.css'\r\n\r\nexport const Loading = () => {\r\n    return (\r\n\r\n        <div className={s.loadingWrap}>\r\n            <div className={s.cssloadDots}>\r\n                <div className={s.cssloadDot}></div>\r\n                <div className={s.cssloadDot}></div>\r\n                <div className={s.cssloadDot}></div>\r\n                <div className={s.cssloadDot}></div>\r\n                <div className={s.cssloadDot}></div>\r\n            </div>\r\n\r\n            <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <defs>\r\n                    <filter id=\"goo\">\r\n                        <feGaussianBlur in=\"SourceGraphic\" result=\"blur\" stdDeviation=\"12\" ></feGaussianBlur>\r\n                        <feColorMatrix in=\"blur\" mode=\"matrix\" values=\"1 0 0 0 0\t0 1 0 0 0\t0 0 1 0 0\t0 0 0 18 -7\" result=\"goo\" ></feColorMatrix>\r\n                        <feBlend in2=\"goo\" in=\"SourceGraphic\" result=\"mix\" ></feBlend>\r\n                    </filter>\r\n                </defs>\r\n            </svg>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Header.module.css'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {logoutTC} from \"../../App/app-reducer\";\r\n\r\nexport const Header = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const logout = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    return (\r\n        <div className={s.header}>\r\n            <span>To-do List</span>\r\n            <button onClick={logout}>Logout</button>\r\n        </div>\r\n    )\r\n}\r\n","import {AppRootStateType} from \"../../store\";\r\nimport {TaskType} from \"../../Task/task-api\";\r\n\r\nfunction hasOwnProperty<X extends {}, Y extends PropertyKey>\r\n(obj: X, prop: Y): obj is X & Record<Y, unknown> {\r\n    return obj.hasOwnProperty(prop)\r\n}\r\n\r\nexport const selectAllTasks = (state: AppRootStateType): TaskType[] => {\r\n    let res: TaskType[] = [];\r\n    Object.keys(state.tasks).forEach((key: string) => {\r\n        if (hasOwnProperty(state.tasks, key)) {\r\n            let tsks = state.tasks[key] as TaskType[];\r\n            res = [...res, ...tsks]\r\n        }\r\n    })\r\n    return res;\r\n}","import {instance} from '../Todolist/todolist-api';\r\nimport {ResponseType} from '../Todolist/todolist-api'\r\n\r\nexport const tasksAPI = {\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(taskId: string, todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(taskTitle: string, todolistId: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitle});\r\n    },\r\n    updateTask(taskId: string, model: UpdateTaskModelType, todolistId: string) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './Search.module.css'\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectAllTasks} from \"./selectors\";\r\nimport {AppRootStateType} from \"../../store\";\r\n\r\nexport const Search = () => {\r\n\r\n    const allTasks = useSelector((state: AppRootStateType) => selectAllTasks(state))\r\n\r\n    const [taskTitle, setTaskTitle] = useState('')\r\n    const [display, setDisplay] = useState(false)\r\n\r\n    const filteredTasks = allTasks.filter(at => {\r\n        return at.title.toLowerCase().includes(taskTitle.toLowerCase())\r\n    })\r\n\r\n    const searchTaskTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTaskTitle(e.currentTarget.value)\r\n        setDisplay(true)\r\n    }\r\n\r\n    return (\r\n        <div className={s.searchContainer}>\r\n            <input type={'text'}\r\n                   placeholder='Search...'\r\n                   onChange={searchTaskTitle}\r\n                   onBlur={() => {\r\n                       taskTitle === \"\" && setDisplay(false)\r\n                   }}\r\n            />\r\n\r\n                <div style={{height: '450px', overflowY: \"auto\"}}>\r\n                    {\r\n                        filteredTasks.map(ft => <div key={ft.id}\r\n                            className={display ? `${s.search}` : `${s.searchNone}`}>{ft.title}</div>)\r\n                    }\r\n                </div>\r\n\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport s from './AddItemForm.module.css'\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    placeholder: string\r\n}\r\n\r\nexport const AddItemForm: React.FC<AddItemFormPropsType> = React.memo((props) => {\r\n\r\n    const [taskTitle, setTaskTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const addTask = () => {\r\n        if (taskTitle.trim() !== \"\") {\r\n            if(taskTitle.length < 20) {\r\n                props.addItem(taskTitle)\r\n                setTaskTitle(\"\")\r\n            } else {\r\n                setError(\"No more than 20 characters\")\r\n            }\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setTaskTitle(e.currentTarget.value)\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addTask()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.addItemForm}>\r\n            <input\r\n                value={taskTitle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                className={error ? \"error\" : \"\"}\r\n                placeholder={props.placeholder}\r\n            />\r\n            <button onClick={addTask}>Add</button>\r\n            {error && <div className={s.error}>{error}</div>}\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './EditableSpan.module.css'\r\n\r\ntype EditableSpanPropsType = {\r\n    className: string\r\n    title: string\r\n    onChange: (newTitle: string) => void\r\n}\r\n\r\nexport const EditableSpan: React.FC<EditableSpanPropsType> = React.memo((props) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState(props.title)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <input\r\n                className={s.input}\r\n                value={title}\r\n                autoFocus\r\n                onBlur={activateViewMode}\r\n                onChange={changeTitle}\r\n            />\r\n            : <span className={props.className} onDoubleClick={activateEditMode}>{props.title}</span>\r\n    )\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport s from './Task.module.css'\r\nimport {EditableSpan} from \"../Common/EditableSpan/EditableSpan\";\r\nimport {TaskStatuses, TaskType} from \"./task-api\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeTasksStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todolistId: string) => void\r\n}\r\n\r\nexport const Task: React.FC<TaskPropsType> = React.memo((props) => {\r\n    const removeTask = () => props.removeTask(props.task.id, props.todolistId)\r\n    const changeTasksStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeTasksStatus(props.task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId])\r\n    const changeTaskTitle = useCallback((newTitle: string) => {\r\n        props.changeTaskTitle(props.task.id, newTitle, props.todolistId)\r\n    }, [props.task.id, props.changeTaskTitle, props.todolistId])\r\n\r\n    return <div className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n        <div className={s.taskTitle}>\r\n            <div>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={props.task.status === TaskStatuses.Completed}\r\n                    onChange={changeTasksStatus}\r\n                />\r\n                <EditableSpan className={s.title} title={props.task.title} onChange={changeTaskTitle}/>\r\n            </div>\r\n            <button onClick={removeTask}>X</button>\r\n        </div>\r\n    </div>\r\n})","import {ToDoListType} from \"../App/App\";\r\nimport {todolistsAPI, TodolistType} from \"./todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"../App/app-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<ToDoListType> = []\r\n\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState,\r\n    reducers: {\r\n        removeTodolistAC: (state, action: PayloadAction<{ todolistId: string }>) => {\r\n            const index = state.findIndex(t => t.id === action.payload.todolistId)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        },\r\n        addTodolistAC: (state, action: PayloadAction<{ todolist: TodolistType }>) => {\r\n            state.unshift({...action.payload.todolist})\r\n        },\r\n        changeTodolistTitleAC: (state, action: PayloadAction<{ todolistId: string, newTitle: string }>) => {\r\n            const index = state.findIndex(t => t.id === action.payload.todolistId)\r\n            state[index].title = action.payload.newTitle\r\n        },\r\n        setTodolistsAC: (state, action: PayloadAction<{ todolists: Array<TodolistType> }>) => {\r\n            return action.payload.todolists\r\n        }\r\n    }\r\n})\r\nexport const todolistsReducer = slice.reducer\r\n\r\nexport const {removeTodolistAC, addTodolistAC, changeTodolistTitleAC, setTodolistsAC} = slice.actions\r\n\r\nexport const fetchTodolistsTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.getTodolists()\r\n        .then(response => {\r\n            dispatch(setTodolistsAC({todolists: response.data}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppErrorAC({error: error.message}))\r\n            dispatch(setAppStatusAC({status: 'failed'}))\r\n        })\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.deleteTodolist(todolistId)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(removeTodolistAC({todolistId}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n                dispatch(setAppStatusAC({status: 'failed'}))\r\n            }\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppErrorAC({error: error.message}))\r\n            dispatch(setAppStatusAC({status: 'failed'}))\r\n        })\r\n}\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.createTodolist(title)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(addTodolistAC({todolist: response.data.data.item}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n                dispatch(setAppStatusAC({status: 'failed'}))\r\n            }\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppErrorAC({error: error.message}))\r\n            dispatch(setAppStatusAC({status: 'failed'}))\r\n        })\r\n}\r\nexport const changeTodolistTitleTC = (todolistId: string, newTitle: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.updateTodolist(todolistId, newTitle)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(changeTodolistTitleAC({todolistId, newTitle}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n                dispatch(setAppStatusAC({status: 'failed'}))\r\n            }\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppErrorAC({error: error.message}))\r\n            dispatch(setAppStatusAC({status: 'failed'}))\r\n        })\r\n}\r\n","import {TasksStateType} from \"../App/App\";\r\nimport {addTodolistAC, removeTodolistAC, setTodolistsAC} from \"../Todolist/todolists-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {TaskPriorities, tasksAPI, TaskStatuses, TaskType, UpdateTaskModelType} from \"./task-api\";\r\nimport {AppRootStateType} from \"../store\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"../App/app-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {TodolistType} from \"../Todolist/todolist-api\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {\r\n        removeTaskAC: (state, action: PayloadAction<{ taskId: string, todolistId: string }>) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        },\r\n        addTaskAC: (state, action: PayloadAction<{ task: TaskType }>) => {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        },\r\n        updateTaskAC: (state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        },\r\n        setTasksAC: (state, action: PayloadAction<{ tasks: Array<TaskType>, todolistId: string }>) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        })\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.todolistId]\r\n        })\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todolists.forEach((t: TodolistType) => state[t.id] = [])\r\n        })\r\n    }\r\n})\r\nexport const tasksReducer = slice.reducer\r\n\r\nexport const {removeTaskAC, addTaskAC, updateTaskAC, setTasksAC} = slice.actions\r\n\r\nexport const fetchTaskTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    tasksAPI.getTasks(todolistId)\r\n        .then(response => {\r\n            dispatch(setTasksAC({tasks: response.data.items, todolistId}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppErrorAC({error: error.message}))\r\n            dispatch(setAppStatusAC({status: 'failed'}))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    tasksAPI.deleteTask(taskId, todolistId)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(removeTaskAC({taskId, todolistId}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n                dispatch(setAppStatusAC({status: 'failed'}))\r\n            }\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppErrorAC({error: error.message}))\r\n            dispatch(setAppStatusAC({status: 'failed'}))\r\n        })\r\n}\r\nexport const addTaskTC = (taskTitle: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    tasksAPI.createTask(taskTitle, todolistId)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(addTaskAC({task: response.data.data.item}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n                dispatch(setAppStatusAC({status: 'failed'}))\r\n            }\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppErrorAC({error: error.message}))\r\n            dispatch(setAppStatusAC({status: 'failed'}))\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    const state = getState()\r\n    const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n    if (!task) {\r\n        console.warn(\"task not found in the state\")\r\n        return\r\n    }\r\n    const apiModel: UpdateTaskModelType = {\r\n        title: task.title,\r\n        description: task.description,\r\n        status: task.status,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        deadline: task.deadline,\r\n            ...model\r\n    }\r\n\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    tasksAPI.updateTask(taskId, apiModel, todolistId)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(updateTaskAC({taskId, model, todolistId}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n                dispatch(setAppStatusAC({status: 'failed'}))\r\n            }\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppErrorAC({error: error.message}))\r\n            dispatch(setAppStatusAC({status: 'failed'}))\r\n        })\r\n}\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport s from './ToDoList.module.css'\r\nimport {AddItemForm} from \"../Common/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../Common/EditableSpan/EditableSpan\";\r\nimport {Task} from \"../Task/Task\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTaskTC} from \"../Task/tasks-reducer\";\r\nimport {TaskStatuses, TaskType} from \"../Task/task-api\";\r\n\r\ntype ToDoListPropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: TaskType[]\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    addTask: (taskTitle: string, todolistId: string) => void\r\n    changeTasksStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    changeTodolistTitle: (todolistId: string, newTitle: string) => void\r\n}\r\n\r\nexport const ToDoList: React.FC<ToDoListPropsType> = React.memo((props) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTaskTC(props.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => props.addTask(title, props.id), [props.addTask, props.id])\r\n    const removeTodolist = () => props.removeTodolist(props.id)\r\n    const changeTodolistTitle = useCallback((newTitle: string) => props.changeTodolistTitle(props.id, newTitle), [props.changeTodolistTitle, props.id])\r\n\r\n    return (\r\n        <div className={s.todolist}>\r\n            <div className={s.todolistHeader}>\r\n                <EditableSpan className={s.title} title={props.title} onChange={changeTodolistTitle}/>\r\n                <button onClick={removeTodolist}>X</button>\r\n            </div>\r\n            <AddItemForm addItem={addTask} placeholder=\"Task title\"/>\r\n            <ul>\r\n                {\r\n                    props.tasks.map(t => <Task\r\n                            key={t.id}\r\n                            task={t}\r\n                            todolistId={props.id}\r\n                            removeTask={props.removeTask}\r\n                            changeTasksStatus={props.changeTasksStatus}\r\n                            changeTaskTitle={props.changeTaskTitle}\r\n                        />\r\n                    )\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n})","import React, {useCallback, useEffect} from 'react'\r\nimport {Search} from \"../Common/Search/Search\";\r\nimport {AddItemForm} from \"../Common/AddItemForm/AddItemForm\";\r\nimport {ToDoList} from \"./ToDoList\";\r\nimport {addTaskTC, removeTaskTC, updateTaskTC} from \"../Task/tasks-reducer\";\r\nimport {TaskStatuses} from \"../Task/task-api\";\r\nimport {addTodolistTC, changeTodolistTitleTC, fetchTodolistsTC, removeTodolistTC} from \"./todolists-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../store\";\r\nimport {TasksStateType, ToDoListType} from \"../App/App\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport const TodolistList = () => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<ToDoListType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.app.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return;\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const removeTask = useCallback((taskId: string, todolistId: string) => {\r\n        dispatch(removeTaskTC(taskId, todolistId))\r\n    }, [])\r\n    const addTask = useCallback((taskTitle: string, todolistId: string) => {\r\n        dispatch(addTaskTC(taskTitle, todolistId))\r\n    }, [])\r\n    const changeTasksStatus = useCallback((taskId: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskTC(taskId, {status}, todolistId))\r\n    }, [])\r\n    const changeTaskTitle = useCallback((taskId: string, title: string, todolistId: string) => {\r\n        dispatch(updateTaskTC(taskId, {title}, todolistId))\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(removeTodolistTC(todolistId))\r\n    }, [])\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n    }, [])\r\n    const changeTodolistTitle = useCallback((todolistId: string, newTitle: string) => {\r\n        dispatch(changeTodolistTitleTC(todolistId, newTitle))\r\n    }, [])\r\n\r\n    if(!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div className=\"app-container\">\r\n            <Search/>\r\n            <div className=\"app-content\">\r\n                <AddItemForm addItem={addTodolist} placeholder=\"To-do list title\"/>\r\n                <div className=\"app-todolists\">\r\n                    {\r\n                        todolists.map(t => {\r\n                            const tasksForTodolist = tasks[t.id]\r\n                            return <ToDoList\r\n                                key={t.id}\r\n                                id={t.id}\r\n                                title={t.title}\r\n                                tasks={tasksForTodolist}\r\n                                removeTask={removeTask}\r\n                                addTask={addTask}\r\n                                changeTasksStatus={changeTasksStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from 'react'\r\nimport s from './Login.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport {loginTC} from \"../App/app-reducer\";\r\nimport {AppRootStateType} from \"../store\";\r\n\r\nexport const Login = () => {\r\n\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.app.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onChangeEmail = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(e.currentTarget.value)\r\n    }\r\n    const onChangePassword = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(e.currentTarget.value)\r\n    }\r\n    const onSubmit = () => {\r\n        dispatch(loginTC(email, password, true))\r\n    }\r\n\r\n    if(isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.loginPage}>\r\n            <p>Use common test account credentials:</p>\r\n            <p>Email: free@samuraijs.com</p>\r\n            <p>Password: free</p>\r\n            <input type=\"text\" onChange={onChangeEmail}/>\r\n            <input type=\"password\" onChange={onChangePassword}/>\r\n            <button onClick={onSubmit}>Login</button>\r\n        </div>\r\n    )\r\n}","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../store\";\r\nimport {TaskType} from \"../Task/task-api\";\r\nimport {initializeAppTC, RequestStatusType, setAppStatusAC} from \"./app-reducer\";\r\nimport {Loading} from \"../Common/Loading/Loading\";\r\nimport {Header} from '../Common/Header/Header';\r\nimport {TodolistList} from \"../Todolist/TodolistList\";\r\nimport {Login} from \"../Login/Login\";\r\nimport {Route, Switch} from 'react-router-dom';\r\n\r\nexport type ToDoListType = {\r\n    id: string\r\n    title: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nexport const App = () => {\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    })\r\n    if (!isInitialized) {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header/>\r\n            <Switch>\r\n                <Route exact path={'/'} render={() => <TodolistList/>}/>\r\n                <Route path={'/login'} render={() => <Login/>}/>\r\n                <Route path={'*'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n            </Switch>\r\n            {status === \"loading\" && <Loading/>}\r\n            {error && <div className=\"app-error\">{error}</div>}\r\n        </div>\r\n    )\r\n}","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {tasksReducer} from './Task/tasks-reducer';\r\nimport {todolistsReducer} from './Todolist/todolists-reducer';\r\nimport {combineReducers} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./App/app-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <HashRouter>\r\n                <App/>\r\n            </HashRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}