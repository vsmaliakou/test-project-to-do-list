{"version":3,"sources":["Common/Loading/Loading.module.css","Task/task-api.ts","Common/AddItemForm.tsx","Common/EditableSpan.tsx","Todolist/todolist-api.ts","Task/Task.tsx","App/app-reducer.ts","Task/tasks-reducer.ts","Todolist/ToDoList.tsx","Todolist/todolists-reducer.ts","Common/Loading/Loading.tsx","App/App.tsx","reportWebVitals.ts","store.ts","index.tsx"],"names":["module","exports","TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","useState","taskTitle","setTaskTitle","error","setError","addTask","trim","length","addItem","value","onChange","e","currentTarget","onKeyPress","charCode","className","onClick","EditableSpan","editMode","setEditMode","title","setTitle","autoFocus","onBlur","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","id","delete","post","put","tasksAPI","todolistId","taskId","model","Task","changeTaskTitle","useCallback","newTitle","task","status","Completed","type","checked","changeTasksStatus","New","removeTask","initialState","setAppStatusAC","setAppErrorAC","updateTaskTC","dispatch","getState","tasks","find","t","apiModel","description","priority","startDate","deadline","then","response","data","resultCode","updateTaskAC","catch","message","console","warn","ToDoList","useDispatch","useEffect","setTasksAC","items","changeTodolistTitle","removeTodolist","map","Loading","s","loadingWrap","cssloadDots","cssloadDot","version","xmlns","in","result","stdDeviation","mode","values","in2","App","todolists","useSelector","state","app","removeTaskAC","removeTaskTC","item","addTaskTC","removeTodolistAC","removeTodolistTC","addTodolist","todolist","addTodolistTC","changeTodolistTitleAC","changeTodolistTitleTC","tasksForTodolist","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","stateCopy","filter","newTask","todoListId","forEach","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qKACAA,EAAOC,QAAU,CAAC,YAAc,6BAA6B,YAAc,6BAA6B,WAAa,4BAA4B,qBAAqB,oCAAoC,uBAAuB,sCAAsC,mBAAmB,kCAAkC,uBAAuB,sCAAsC,uBAAuB,sCAAsC,uBAAuB,wC,2CCiBjcC,EAOAC,E,4DCnBCC,EAA8CC,IAAMC,MAAK,SAACC,GAAW,IAAD,EAE3CC,mBAAiB,IAF0B,mBAEtEC,EAFsE,KAE3DC,EAF2D,OAGnDF,mBAAwB,MAH2B,mBAGtEG,EAHsE,KAG/DC,EAH+D,KAKvEC,EAAU,WACa,KAArBJ,EAAUK,OACPL,EAAUM,OAAS,IAClBR,EAAMS,QAAQP,GACdC,EAAa,KAEbE,EAAS,8BAGbA,EAAS,sBAajB,OACI,gCACI,uBACIK,MAAOR,EACPS,SAdY,SAACC,GAAD,OAAsCT,EAAaS,EAAEC,cAAcH,QAe/EI,WAdc,SAACF,GACT,OAAVR,GACAC,EAAS,MAEM,KAAfO,EAAEG,UACFT,KAUIU,UAAWZ,EAAQ,QAAU,KAEjC,wBAAQa,QAASX,EAAjB,iBACCF,GAAS,qBAAKY,UAAU,gBAAf,SAAgCZ,UCnCzCc,EAAgDpB,IAAMC,MAAK,SAACC,GAAW,IAAD,EAE/CC,oBAAS,GAFsC,mBAExEkB,EAFwE,KAE9DC,EAF8D,OAGrDnB,mBAASD,EAAMqB,OAHsC,mBAGxEA,EAHwE,KAGjEC,EAHiE,KAkB/E,OACIH,EACM,uBACET,MAAOW,EACPE,WAAS,EACTC,OAba,WACrBJ,GAAY,GACZpB,EAAMW,SAASU,IAYPV,SAVQ,SAACC,GACjBU,EAASV,EAAEC,cAAcH,UAWnB,sBAAMe,cArBS,WACrBL,GAAY,GACZE,EAAStB,EAAMqB,QAmBT,SAAwCrB,EAAMqB,W,QC/B/CK,E,OAAWC,EAAMC,OAAO,CACjCC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAINC,EAAe,WAEpB,OAAON,EAASO,IAAyB,eAFpCD,EAAe,SAITE,GACX,OAAOR,EAASS,OAAT,qBAA4CD,KAL9CF,EAAe,SAOTX,GACX,OAAOK,EAASU,KAA2C,aAAc,CAACf,MAAOA,KAR5EW,EAAe,SAUTE,EAAYb,GACvB,OAAOK,EAASW,IAAT,qBAAyCH,GAAM,CAACb,WHlBlDiB,EAAW,SACXC,GACL,OAAOb,EAASO,IAAT,qBAA6CM,EAA7C,YAFFD,EAAW,SAITE,EAAgBD,GACvB,OAAOb,EAASS,OAAT,qBAA4CI,EAA5C,kBAAgEC,KALlEF,EAAW,SAOTpC,EAAmBqC,GAC1B,OAAOb,EAASU,KAAT,qBAA4DG,EAA5D,UAAgF,CAAClB,MAAOnB,KAR1FoC,EAAW,SAUTE,EAAgBC,EAA4BF,GACnD,OAAOb,EAASW,IAAT,qBAAmDE,EAAnD,kBAAuEC,GAAUC,K,SAIpF9C,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAOAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KIbL,IAAM8C,EAAgC,SAAC1C,GAC1C,IAEM2C,EAAkBC,uBAAY,SAACC,GAAD,OAAsB7C,EAAM2C,gBAAgB3C,EAAM8C,KAAKZ,GAAIW,EAAU7C,EAAMuC,cAAa,CAACvC,EAAM8C,KAAKZ,GAAIlC,EAAM2C,gBAAiB3C,EAAMuC,aAEzK,OAAO,sBAAKvB,UAAWhB,EAAM8C,KAAKC,SAAWpD,EAAaqD,UAAY,UAAY,GAA3E,UACH,uBACIC,KAAK,WACLC,QAASlD,EAAM8C,KAAKC,SAAWpD,EAAaqD,UAC5CrC,SAPkB,SAACC,GAAD,OAAsCZ,EAAMmD,kBAAkBnD,EAAM8C,KAAKZ,GAAItB,EAAEC,cAAcqC,QAAUvD,EAAaqD,UAAYrD,EAAayD,IAAKpD,EAAMuC,eAS9K,cAACrB,EAAD,CAAcG,MAAOrB,EAAM8C,KAAKzB,MAAOV,SAAUgC,IACjD,wBAAQ1B,QAXO,kBAAMjB,EAAMqD,WAAWrD,EAAM8C,KAAKZ,GAAIlC,EAAMuC,aAW3D,mB,6BCpBFe,EAAe,CACjBP,OAAQ,UACR3C,MAAO,MAgBEmD,EAAiB,SAACR,GAAD,MAAgC,CAACE,KAAM,sBAAuBF,WAC/ES,EAAgB,SAACpD,GAAD,MAA2B,CAAC6C,KAAM,qBAAsB7C,UCR/EkD,EAA+B,GAgGxBG,EAAe,SAACjB,EAAgBC,EAAkCF,GAAnD,OAA0E,SAACmB,EAAoBC,GACvH,IACMb,EADQa,IACKC,MAAMrB,GAAYsB,MAAK,SAAAC,GAAC,OAAIA,EAAE5B,KAAOM,KACxD,GAAIM,EAAJ,CAIA,IAAMiB,EAAgC,CAClC1C,MAAOyB,EAAKzB,MACZ2C,YAAalB,EAAKkB,YAClBjB,OAAQD,EAAKC,OACbkB,SAAUnB,EAAKmB,SACfC,UAAWpB,EAAKoB,UAChBC,SAAUrB,EAAKqB,UAGnBT,EAASH,EAAe,YACxBjB,EAAoBE,EAAQuB,EAAUxB,GACjC6B,MAAK,SAAAC,GAC+B,IAA7BA,EAASC,KAAKC,YACdb,EAjEY,SAAClB,EAAgBC,EAAkCF,GAAnD,MAA2E,CAACU,KAAM,wBAAyBT,SAAQC,QAAOF,cAiE7HiC,CAAahC,EAAQC,EAAOF,IACrCmB,EAASH,EAAe,gBAExBG,EAASF,EAAc,wBACvBE,EAASH,EAAe,eAG/BkB,OAAM,SAAArE,GACHsD,EAASF,EAAcpD,EAAMsE,UAC7BhB,EAASH,EAAe,mBAzB5BoB,QAAQC,KAAK,iCC/FRC,EAAwC/E,IAAMC,MAAK,SAACC,GAE7D,IAAM0D,EAAWoB,cAEjBC,qBAAU,WD6Ca,IAACxC,EC5CpBmB,GD4CoBnB,EC5CCvC,EAAMkC,GD4CgB,SAACwB,GAChDA,EAASH,EAAe,YACxBjB,EAAkBC,GACb6B,MAAK,SAAAC,GACFX,EANc,SAACE,EAAwBrB,GAAzB,MAAiD,CAACU,KAAM,sBAAuBW,QAAOrB,cAM3FyC,CAAWX,EAASC,KAAKW,MAAO1C,IACzCmB,EAASH,EAAe,iBAE3BkB,OAAM,SAAArE,GACHsD,EAASF,EAAcpD,EAAMsE,UAC7BhB,EAASH,EAAe,mBCpD7B,IAEH,IAAMjD,EAAUsC,uBAAY,SAACvB,GAAD,OAAmBrB,EAAMM,QAAQe,EAAOrB,EAAMkC,MAAK,CAAClC,EAAMM,QAASN,EAAMkC,KAE/FgD,EAAsBtC,uBAAY,SAACC,GAAD,OAAsB7C,EAAMkF,oBAAoBlF,EAAMkC,GAAIW,KAAW,CAAC7C,EAAMkF,oBAAqBlF,EAAMkC,KAE/I,OACI,gCACI,cAAChB,EAAD,CAAcG,MAAOrB,EAAMqB,MAAOV,SAAUuE,IAC5C,wBAAQjE,QANO,kBAAMjB,EAAMmF,eAAenF,EAAMkC,KAMhD,eACA,cAACrC,EAAD,CAAaY,QAASH,IACtB,6BAEQN,EAAM4D,MAAMwB,KAAI,SAAAtB,GAAC,OAAI,cAAC,EAAD,CAEbhB,KAAMgB,EACNvB,WAAYvC,EAAMkC,GAClBmB,WAAYrD,EAAMqD,WAClBF,kBAAmBnD,EAAMmD,kBACzBR,gBAAiB3C,EAAM2C,iBALlBmB,EAAE5B,eC9B7BoB,EAAoC,G,gBCP7B+B,EAAU,WACnB,OAEI,sBAAKrE,UAAWsE,IAAEC,YAAlB,UACI,sBAAKvE,UAAWsE,IAAEE,YAAlB,UACI,qBAAKxE,UAAWsE,IAAEG,aAClB,qBAAKzE,UAAWsE,IAAEG,aAClB,qBAAKzE,UAAWsE,IAAEG,aAClB,qBAAKzE,UAAWsE,IAAEG,aAClB,qBAAKzE,UAAWsE,IAAEG,gBAGtB,qBAAKC,QAAQ,MAAMC,MAAM,6BAAzB,SACI,+BACI,yBAAQzD,GAAG,MAAX,UACI,gCAAgB0D,GAAG,gBAAgBC,OAAO,OAAOC,aAAa,OAC9D,+BAAeF,GAAG,OAAOG,KAAK,SAASC,OAAO,+CAA4CH,OAAO,QACjG,yBAASI,IAAI,MAAML,GAAG,gBAAgBC,OAAO,mBCQxDK,EAAM,WAEf,IAAMC,EAAYC,aAAmD,SAAAC,GAAK,OAAIA,EAAMF,aAC9EvC,EAAQwC,aAA8C,SAAAC,GAAK,OAAIA,EAAMzC,SACrEb,EAASqD,aAAiD,SAAAC,GAAK,OAAIA,EAAMC,IAAIvD,UAC7E3C,EAAQgG,aAA6C,SAAAC,GAAK,OAAIA,EAAMC,IAAIlG,SAExEsD,EAAWoB,cAEjBC,qBAAU,WACNrB,GFF8B,SAACA,GACnCA,EAASH,EAAe,YACxBvB,IACKoC,MAAK,SAAAC,GACFX,EANuD,CAACT,KAAM,8BAA+BkD,UAMrE9B,EAASC,OACjCZ,EAASH,EAAe,iBAE3BkB,OAAM,SAAArE,GACHsD,EAASF,EAAcpD,EAAMsE,UAC7BhB,EAASH,EAAe,mBEN7B,IAEH,IAAMF,EAAaT,uBAAY,SAACJ,EAAgBD,GAC5CmB,EJuCoB,SAAClB,EAAgBD,GAAjB,OAAwC,SAACmB,GACjEA,EAASH,EAAe,YACxBjB,EAAoBE,EAAQD,GACvB6B,MAAK,SAAAC,GACFX,EArBgB,SAAClB,EAAgBD,GAAjB,MAAyC,CAACU,KAAM,yBAA0BT,SAAQD,cAqBzFgE,CAAa/D,EAAQD,IAC9BmB,EAASH,EAAe,iBAE3BkB,OAAM,SAAArE,GACHsD,EAASF,EAAcpD,EAAMsE,UAC7BhB,EAASH,EAAe,eIhDnBiD,CAAahE,EAAQD,MAC/B,IACGjC,EAAUsC,uBAAY,SAAC1C,EAAmBqC,GAC5CmB,EJgDiB,SAACxD,EAAmBqC,GAApB,OAA2C,SAACmB,GACjEA,EAASH,EAAe,YACxBjB,EAAoBpC,EAAWqC,GAC1B6B,MAAK,SAAAC,GAC+B,IAA7BA,EAASC,KAAKC,YACdb,EAjC8B,CAACT,KAAM,qBAAsBH,KAiCxCuB,EAASC,KAAKA,KAAKmC,OACtC/C,EAASH,EAAe,gBAExBG,EAASF,EAAc,wBACvBE,EAASH,EAAe,eAG/BkB,OAAM,SAAArE,GACHsD,EAASF,EAAcpD,EAAMsE,UAC7BhB,EAASH,EAAe,eI9DnBmD,CAAUxG,EAAWqC,MAC/B,IACGY,EAAoBP,uBAAY,SAACJ,EAAgBO,EAAsBR,GACzEmB,EAASD,EAAajB,EAAQ,CAACO,UAASR,MACzC,IACGI,EAAkBC,uBAAY,SAACJ,EAAgBnB,EAAekB,GAChEmB,EAASD,EAAajB,EAAQ,CAACnB,SAAQkB,MACxC,IAEG4C,EAAiBvC,uBAAY,SAACL,GAChCmB,EFPwB,SAACnB,GAAD,OAAwB,SAACmB,GACrDA,EAASH,EAAe,YACxBvB,EAA4BO,GACvB6B,MAAK,SAAAC,GACFX,EArBoB,SAACnB,GAAD,MAAyB,CAACU,KAAM,gCAAiCV,cAqB5EoE,CAAiBpE,IAC1BmB,EAASH,EAAe,iBAE3BkB,OAAM,SAAArE,GACHsD,EAASF,EAAcpD,EAAMsE,UAC7BhB,EAASH,EAAe,eEFnBqD,CAAiBrE,MAC3B,IACGsE,EAAcjE,uBAAY,SAACvB,GAC7BqC,EFEqB,SAACrC,GAAD,OAAmB,SAACqC,GAC7CA,EAASH,EAAe,YACxBvB,EAA4BX,GACvB+C,MAAK,SAAAC,GAC+B,IAA7BA,EAASC,KAAKC,YACdb,EAjC0C,CAACT,KAAM,6BAA8B6D,SAiCxDzC,EAASC,KAAKA,KAAKmC,OAC1C/C,EAASH,EAAe,gBAExBG,EAASF,EAAc,wBACvBE,EAASH,EAAe,eAG/BkB,OAAM,SAAArE,GACHsD,EAASF,EAAcpD,EAAMsE,UAC7BhB,EAASH,EAAe,eEhBnBwD,CAAc1F,MACxB,IACG6D,EAAsBtC,uBAAY,SAACL,EAAoBM,GACzDa,EFgB6B,SAACnB,EAAoBM,GAArB,OAA0C,SAACa,GAC5EA,EAASH,EAAe,YACxBvB,EAA4BO,EAAYM,GACnCuB,MAAK,SAAAC,GAC+B,IAA7BA,EAASC,KAAKC,YACdb,EAjDqB,SAACnB,EAAoBM,GAArB,MAA2C,CAACI,KAAM,sCAAuCV,aAAYM,YAiDjHmE,CAAsBzE,EAAYM,IAC3Ca,EAASH,EAAe,gBAExBG,EAASF,EAAc,wBACvBE,EAASH,EAAe,eAG/BkB,OAAM,SAAArE,GACHsD,EAASF,EAAcpD,EAAMsE,UAC7BhB,EAASH,EAAe,eE9BnB0D,CAAsB1E,EAAYM,MAC5C,IAEH,OACI,sBAAK7B,UAAU,MAAf,UACgB,YAAX+B,GAAwB,cAAC,EAAD,IACxB3C,GAAS,8BAAMA,IAChB,cAACP,EAAD,CAAaY,QAASoG,IAElBV,EAAUf,KAAI,SAAAtB,GACV,IAAMoD,EAAmBtD,EAAME,EAAE5B,IACjC,OAAO,cAAC2C,EAAD,CAEH3C,GAAI4B,EAAE5B,GACNb,MAAOyC,EAAEzC,MACTuC,MAAOsD,EACP7D,WAAYA,EACZ/C,QAASA,EACT6C,kBAAmBA,EACnBgC,eAAgBA,EAChBxC,gBAAiBA,EACjBuC,oBAAqBA,GAThBpB,EAAE5B,WC3DhBiF,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBjD,MAAK,YAAkD,IAA/CkD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,gBCHRO,EAAcC,YAAgB,CAChChE,MNUwB,WAAuE,IAAtEyC,EAAqE,uDAA7D/C,EAAcuE,EAA+C,uCAC9F,OAAQA,EAAO5E,MACX,IAAK,yBACD,IAAM6E,EAAS,eAAOzB,GAChBzC,EAAQkE,EAAUD,EAAOtF,YAE/B,OADAuF,EAAUD,EAAOtF,YAAcqB,EAAMmE,QAAO,SAAAjE,GAAC,OAAIA,EAAE5B,KAAO2F,EAAOrF,UAC1DsF,EAEX,IAAK,qBACD,IAAMA,EAAS,eAAOzB,GAChB2B,EAAUH,EAAO/E,KACjBc,EAAQkE,EAAUE,EAAQC,YAEhC,OADAH,EAAUE,EAAQC,YAAlB,CAAiCD,GAAjC,mBAA6CpE,IACtCkE,EAEX,IAAK,wBACD,IAAMA,EAAS,eAAOzB,GAChBzC,EAAQkE,EAAUD,EAAOtF,YAE/B,OADAuF,EAAUD,EAAOtF,YAAcqB,EAAMwB,KAAI,SAAAtB,GAAC,OAAIA,EAAE5B,KAAO2F,EAAOrF,OAAhB,2BAA6BsB,GAAM+D,EAAOpF,OAASqB,KAC1FgE,EAEX,IAAK,6BACD,OAAO,2BACAzB,GADP,kBAEKwB,EAAOf,SAAS5E,GAAK,KAG9B,IAAK,gCACD,IAAM4F,EAAS,eAAOzB,GAEtB,cADOyB,EAAUD,EAAOtF,YACjBuF,EAEX,IAAK,8BACD,IAAMA,EAAS,eAAOzB,GAEtB,OADAwB,EAAO1B,UAAU+B,SAAQ,SAAApE,GAAC,OAAIgE,EAAUhE,EAAE5B,IAAM,MACzC4F,EAEX,IAAK,sBACD,IAAMA,EAAS,eAAOzB,GAEtB,OADAyB,EAAUD,EAAOtF,YAAcsF,EAAOjE,MAC/BkE,EAEX,QACI,OAAOzB,IMpDfF,UJI4B,WAA4E,IAA3EE,EAA0E,uDAAlE/C,EAAcuE,EAAoD,uCACvG,OAAQA,EAAO5E,MACX,IAAK,gCACD,OAAOoD,EAAM0B,QAAO,SAAAjE,GAAC,OAAIA,EAAE5B,KAAO2F,EAAOtF,cAC7C,IAAK,6BACD,MAAM,CAAEsF,EAAOf,UAAf,mBAA4BT,IAChC,IAAK,sCACD,IAAMS,EAAWT,EAAMxC,MAAK,SAAAC,GAAC,OAAIA,EAAE5B,KAAO2F,EAAOtF,cAIjD,OAHIuE,IACAA,EAASzF,MAAQwG,EAAOhF,UAErB,YAAKwD,GAChB,IAAK,8BACD,OAAOwB,EAAO1B,UAClB,QACI,OAAOE,IIlBfC,IPEsB,WAA6F,IAA5FD,EAA2F,uDAA9D/C,EAAcuE,EAAgD,uCAClH,OAAQA,EAAO5E,MACX,IAAK,sBACD,OAAO,2BAAIoD,GAAX,IAAkBtD,OAAQ8E,EAAO9E,SACrC,IAAK,qBACD,OAAO,2BAAIsD,GAAX,IAAkBjG,MAAOyH,EAAOzH,QACpC,QACI,OAAOiG,MONN8B,EAAQC,YAAYT,EAAaU,YAAgBC,MCJ9DC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACI,cAAC,EAAD,QAGRO,SAASC,eAAe,SAM5BxB,M","file":"static/js/main.43833383.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loadingWrap\":\"Loading_loadingWrap__3Oauo\",\"cssloadDots\":\"Loading_cssloadDots__L69ls\",\"cssloadDot\":\"Loading_cssloadDot__4ceA2\",\"cssload-dot-colors\":\"Loading_cssload-dot-colors__3Y3qe\",\"cssload-dot-rotate-1\":\"Loading_cssload-dot-rotate-1__LYv1g\",\"cssload-dot-move\":\"Loading_cssload-dot-move__mj87V\",\"cssload-dot-rotate-2\":\"Loading_cssload-dot-rotate-2__1yaub\",\"cssload-dot-rotate-3\":\"Loading_cssload-dot-rotate-3__1d8uA\",\"cssload-dot-rotate-4\":\"Loading_cssload-dot-rotate-4__1jLBX\"};","import {instance} from '../Todolist/todolist-api';\r\nimport {ResponseType} from '../Todolist/todolist-api'\r\n\r\nexport const tasksAPI = {\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(taskId: string, todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(taskTitle: string, todolistId: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitle});\r\n    },\r\n    updateTask(taskId: string, model: UpdateTaskModelType, todolistId: string) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm: React.FC<AddItemFormPropsType> = React.memo((props) => {\r\n\r\n    const [taskTitle, setTaskTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const addTask = () => {\r\n        if (taskTitle.trim() !== \"\") {\r\n            if(taskTitle.length < 20) {\r\n                props.addItem(taskTitle)\r\n                setTaskTitle(\"\")\r\n            } else {\r\n                setError(\"No more than 20 characters\")\r\n            }\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setTaskTitle(e.currentTarget.value)\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addTask()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                value={taskTitle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                className={error ? \"error\" : \"\"}\r\n            />\r\n            <button onClick={addTask}>Add</button>\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newTitle: string) => void\r\n}\r\n\r\nexport const EditableSpan: React.FC<EditableSpanPropsType> = React.memo((props) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState(props.title)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <input\r\n                value={title}\r\n                autoFocus\r\n                onBlur={activateViewMode}\r\n                onChange={changeTitle}\r\n            />\r\n            : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n    )\r\n})","import axios from 'axios'\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '15f7a0a9-64c3-4a6a-9f8f-a55a7d8541a6'\r\n    }\r\n})\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>('todo-lists');\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title});\r\n    }\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {EditableSpan} from \"../Common/EditableSpan\";\r\nimport {TaskStatuses, TaskType} from \"./task-api\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeTasksStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todolistId: string) => void\r\n}\r\n\r\nexport const Task: React.FC<TaskPropsType> = (props) => {\r\n    const removeTask = () => props.removeTask(props.task.id, props.todolistId)\r\n    const changeTasksStatus = (e: ChangeEvent<HTMLInputElement>) => props.changeTasksStatus(props.task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    const changeTaskTitle = useCallback((newTitle: string) => props.changeTaskTitle(props.task.id, newTitle, props.todolistId), [props.task.id, props.changeTaskTitle, props.todolistId])\r\n\r\n    return <div className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n        <input\r\n            type=\"checkbox\"\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            onChange={changeTasksStatus}\r\n        />\r\n        <EditableSpan title={props.task.title} onChange={changeTaskTitle}/>\r\n        <button onClick={removeTask}>X</button>\r\n    </div>\r\n}","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\ntype AppActionsType = ReturnType<typeof setAppStatusAC> | ReturnType<typeof setAppErrorAC>\r\n\r\nconst initialState = {\r\n    status: 'loading' as RequestStatusType,\r\n    error: null as string | null\r\n}\r\n\r\ntype AppInitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: AppInitialStateType = initialState, action: AppActionsType): AppInitialStateType => {\r\n    switch (action.type) {\r\n        case 'TEST/APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'TEST/APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'TEST/APP/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'TEST/APP/SET-ERROR', error} as const)","import {TasksStateType} from \"../App/App\";\r\nimport {addTodolistAC, removeTodolistAC, setTodolistsAC} from \"../Todolist/todolists-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {tasksAPI, TaskType, UpdateTaskModelType} from \"./task-api\";\r\nimport {AppRootStateType} from \"../store\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"../App/app-reducer\";\r\n\r\ntype TodolistActionType = ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof setTodolistsAC>\r\n    | ReturnType<typeof setTasksAC>\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state = initialState, action: TodolistActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'TEST/TASKS/REMOVE-TASK':{\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId]\r\n            stateCopy[action.todolistId] = tasks.filter(t => t.id !== action.taskId)\r\n            return stateCopy\r\n        }\r\n        case 'TEST/TASK/ADD-TASK':{\r\n            const stateCopy = {...state}\r\n            const newTask = action.task\r\n            const tasks = stateCopy[newTask.todoListId]\r\n            stateCopy[newTask.todoListId] = [newTask, ...tasks]\r\n            return stateCopy\r\n        }\r\n        case 'TEST/TASK/UPDATE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId]\r\n            stateCopy[action.todolistId] = tasks.map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            return stateCopy\r\n        }\r\n        case 'TEST/TODOLIST/ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolist.id]: []\r\n            }\r\n        }\r\n        case 'TEST/TODOLIST/REMOVE-TODOLIST': {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.todolistId]\r\n            return stateCopy\r\n        }\r\n        case 'TEST/TODOLIST/SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach(t => stateCopy[t.id] = [])\r\n            return stateCopy\r\n        }\r\n        case 'TEST/TASK/SET-TASKS': {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = action.tasks\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'TEST/TASKS/REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'TEST/TASK/ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({type: 'TEST/TASK/UPDATE-TASK', taskId, model, todolistId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({type: 'TEST/TASK/SET-TASKS', tasks, todolistId} as const)\r\n\r\nexport const fetchTaskTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    tasksAPI.getTasks(todolistId)\r\n        .then(response => {\r\n            dispatch(setTasksAC(response.data.items, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppErrorAC(error.message))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    tasksAPI.deleteTask(taskId, todolistId)\r\n        .then(response => {\r\n            dispatch(removeTaskAC(taskId, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppErrorAC(error.message))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\nexport const addTaskTC = (taskTitle: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    tasksAPI.createTask(taskTitle, todolistId)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(addTaskAC(response.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                dispatch(setAppErrorAC('Some error occurred'))\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppErrorAC(error.message))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    const state = getState()\r\n    const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n    if(!task){\r\n        console.warn(\"task not found in the state\")\r\n        return\r\n    }\r\n    const apiModel: UpdateTaskModelType = {\r\n        title: task.title,\r\n        description: task.description,\r\n        status: task.status,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        deadline: task.deadline\r\n    }\r\n\r\n    dispatch(setAppStatusAC('loading'))\r\n    tasksAPI.updateTask(taskId, apiModel, todolistId)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(updateTaskAC(taskId, model, todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                dispatch(setAppErrorAC('Some error occurred'))\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppErrorAC(error.message))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../Common/AddItemForm\";\r\nimport {EditableSpan} from \"../Common/EditableSpan\";\r\nimport {Task} from \"../Task/Task\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTaskTC} from \"../Task/tasks-reducer\";\r\nimport {TaskStatuses, TaskType} from \"../Task/task-api\";\r\n\r\ntype ToDoListPropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: TaskType[]\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    addTask: (taskTitle: string, todolistId: string) => void\r\n    changeTasksStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    changeTodolistTitle: (todolistId: string, newTitle: string) => void\r\n}\r\n\r\nexport const ToDoList: React.FC<ToDoListPropsType> = React.memo((props) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTaskTC(props.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => props.addTask(title, props.id), [props.addTask, props.id])\r\n    const removeTodolist = () => props.removeTodolist(props.id)\r\n    const changeTodolistTitle = useCallback((newTitle: string) => props.changeTodolistTitle(props.id, newTitle), [props.changeTodolistTitle, props.id])\r\n\r\n    return (\r\n        <div>\r\n            <EditableSpan title={props.title} onChange={changeTodolistTitle}/>\r\n            <button onClick={removeTodolist}>X</button>\r\n            <AddItemForm addItem={addTask}/>\r\n            <ul>\r\n                {\r\n                    props.tasks.map(t => <Task\r\n                            key={t.id}\r\n                            task={t}\r\n                            todolistId={props.id}\r\n                            removeTask={props.removeTask}\r\n                            changeTasksStatus={props.changeTasksStatus}\r\n                            changeTaskTitle={props.changeTaskTitle}\r\n                        />\r\n                    )\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n})","import {ToDoListType} from \"../App/App\";\r\nimport {todolistsAPI, TodolistType} from \"./todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"../App/app-reducer\";\r\n\r\ntype TodolistActionType = ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof setTodolistsAC>\r\n\r\nconst initialState: Array<ToDoListType> = []\r\n\r\nexport const todolistsReducer = (state = initialState, action: TodolistActionType): Array<ToDoListType> => {\r\n    switch (action.type) {\r\n        case 'TEST/TODOLIST/REMOVE-TODOLIST':\r\n            return state.filter(t => t.id !== action.todolistId)\r\n        case 'TEST/TODOLIST/ADD-TODOLIST':\r\n            return [action.todolist, ...state]\r\n        case 'TEST/TODOLIST/CHANGE-TODOLIST-TITLE':\r\n            const todolist = state.find(t => t.id === action.todolistId)\r\n            if (todolist) {\r\n                todolist.title = action.newTitle\r\n            }\r\n            return [ ...state]\r\n        case 'TEST/TODOLIST/SET-TODOLISTS':\r\n            return action.todolists\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string) => ({type: 'TEST/TODOLIST/REMOVE-TODOLIST', todolistId} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'TEST/TODOLIST/ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (todolistId: string, newTitle: string) => ({type: 'TEST/TODOLIST/CHANGE-TODOLIST-TITLE', todolistId, newTitle} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'TEST/TODOLIST/SET-TODOLISTS', todolists} as const)\r\n\r\nexport const fetchTodolistsTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTodolists()\r\n        .then(response => {\r\n            dispatch(setTodolistsAC(response.data))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppErrorAC(error.message))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.deleteTodolist(todolistId)\r\n        .then(response => {\r\n            dispatch(removeTodolistAC(todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppErrorAC(error.message))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTodolist(title)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(addTodolistAC(response.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                dispatch(setAppErrorAC('Some error occurred'))\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppErrorAC(error.message))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\nexport const changeTodolistTitleTC = (todolistId: string, newTitle: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.updateTodolist(todolistId, newTitle)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(changeTodolistTitleAC(todolistId, newTitle))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                dispatch(setAppErrorAC('Some error occurred'))\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppErrorAC(error.message))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\n","import React from 'react';\r\nimport s from './Loading.module.css'\r\n\r\nexport const Loading = () => {\r\n    return (\r\n\r\n        <div className={s.loadingWrap}>\r\n            <div className={s.cssloadDots}>\r\n                <div className={s.cssloadDot}></div>\r\n                <div className={s.cssloadDot}></div>\r\n                <div className={s.cssloadDot}></div>\r\n                <div className={s.cssloadDot}></div>\r\n                <div className={s.cssloadDot}></div>\r\n            </div>\r\n\r\n            <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <defs>\r\n                    <filter id=\"goo\">\r\n                        <feGaussianBlur in=\"SourceGraphic\" result=\"blur\" stdDeviation=\"12\" ></feGaussianBlur>\r\n                        <feColorMatrix in=\"blur\" mode=\"matrix\" values=\"1 0 0 0 0\t0 1 0 0 0\t0 0 1 0 0\t0 0 0 18 -7\" result=\"goo\" ></feColorMatrix>\r\n                        <feBlend in2=\"goo\" in=\"SourceGraphic\" result=\"mix\" ></feBlend>\r\n                    </filter>\r\n                </defs>\r\n            </svg>\r\n        </div>\r\n    )\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {ToDoList} from \"../Todolist/ToDoList\";\r\nimport {AddItemForm} from \"../Common/AddItemForm\";\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    removeTodolistTC\r\n} from \"../Todolist/todolists-reducer\";\r\nimport {\r\n    removeTaskTC,\r\n    addTaskTC, updateTaskTC\r\n} from \"../Task/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../store\";\r\nimport {TaskStatuses, TaskType} from \"../Task/task-api\";\r\nimport {RequestStatusType} from \"./app-reducer\";\r\nimport {Loading} from \"../Common/Loading/Loading\";\r\n\r\nexport type ToDoListType = {\r\n    id: string\r\n    title: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nexport const App = () => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<ToDoListType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const removeTask = useCallback((taskId: string, todolistId: string) => {\r\n        dispatch(removeTaskTC(taskId, todolistId))\r\n    }, [])\r\n    const addTask = useCallback((taskTitle: string, todolistId: string) => {\r\n        dispatch(addTaskTC(taskTitle, todolistId))\r\n    }, [])\r\n    const changeTasksStatus = useCallback((taskId: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskTC(taskId, {status}, todolistId))\r\n    }, [])\r\n    const changeTaskTitle = useCallback((taskId: string, title: string, todolistId: string) => {\r\n        dispatch(updateTaskTC(taskId, {title}, todolistId))\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(removeTodolistTC(todolistId))\r\n    }, [])\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n    }, [])\r\n    const changeTodolistTitle = useCallback((todolistId: string, newTitle: string) => {\r\n        dispatch(changeTodolistTitleTC(todolistId, newTitle))\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {status === \"loading\" && <Loading/>}\r\n            {error && <div>{error}</div>}\r\n            <AddItemForm addItem={addTodolist}/>\r\n            {\r\n                todolists.map(t => {\r\n                    const tasksForTodolist = tasks[t.id]\r\n                    return <ToDoList\r\n                        key={t.id}\r\n                        id={t.id}\r\n                        title={t.title}\r\n                        tasks={tasksForTodolist}\r\n                        removeTask={removeTask}\r\n                        addTask={addTask}\r\n                        changeTasksStatus={changeTasksStatus}\r\n                        removeTodolist={removeTodolist}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodolistTitle={changeTodolistTitle}\r\n                    />\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {tasksReducer} from './Task/tasks-reducer';\r\nimport {todolistsReducer} from './Todolist/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./App/app-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}