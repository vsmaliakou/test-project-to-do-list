{"version":3,"sources":["AddItemForm.tsx","ToDoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AddItemForm","props","useState","taskTitle","setTaskTitle","error","setError","addTask","trim","addItem","value","onChange","e","currentTarget","onKeyPress","charCode","className","onClick","ToDoList","title","removeTodolist","id","tasks","map","t","isDone","type","checked","changeTasksStatus","removeTask","App","todolistId1","v1","todolistId2","todolists","setTodolists","setTasks","taskId","todolistId","todolistTasks","filter","task","newIsDone","find","filteredTodolist","newTodolistId","tasksForTodolist","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b93f05a5.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm: React.FC<AddItemFormPropsType> = (props) => {\r\n\r\n    const [taskTitle, setTaskTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const addTask = () => {\r\n        if (taskTitle.trim() !== \"\") {\r\n            props.addItem(taskTitle)\r\n            setTaskTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setTaskTitle(e.currentTarget.value)\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        e.charCode === 13 && addTask()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                value={taskTitle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                className={error ? \"error\" : \"\"}\r\n            />\r\n            <button onClick={addTask}>Add</button>\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {TaskType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\n\r\n\r\ntype ToDoListPropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: TaskType[]\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    addTask: (taskTitle: string, todolistId: string) => void\r\n    changeTasksStatus: (taskId: string, newIsDone: boolean, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n}\r\n\r\n\r\nexport const ToDoList: React.FC<ToDoListPropsType> = (props) => {\r\n\r\n    const addTask = (title: string) => props.addTask(title, props.id)\r\n\r\n    const removeTodolist = () => props.removeTodolist(props.id)\r\n\r\n    return (\r\n        <div>\r\n            <h3>{props.title}\r\n                <button onClick={removeTodolist}>X</button>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <ul>\r\n                {\r\n                    props.tasks.map(t => {\r\n\r\n                        const removeTask = () => props.removeTask(t.id, props.id)\r\n                        const changeTasksStatus = (e: ChangeEvent<HTMLInputElement>) => props.changeTasksStatus(t.id, e.currentTarget.checked, props.id)\r\n\r\n                        return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                checked={t.isDone}\r\n                                onChange={changeTasksStatus}\r\n                            />\r\n                            <span>{t.title}</span>\r\n                            <button onClick={removeTask}>X</button>\r\n                        </li>\r\n                    })\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {ToDoList} from \"./ToDoList\";\nimport {v1} from \"uuid\";\nimport {AddItemForm} from \"./AddItemForm\";\n\ntype ToDoListType = {\n    id: string\n    title: string\n}\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\nexport type TasksStateType = {\n    [key: string]: TaskType[]\n}\n\nexport const App = () => {\n\n    let todolistId1 = v1()\n    let todolistId2 = v1()\n\n    const [todolists, setTodolists] = useState<ToDoListType[]>([\n        {id: todolistId1, title: \"Shopping List\"},\n        {id: todolistId2, title: \"Things To Do\"}\n    ])\n    const [tasks, setTasks] = useState<TasksStateType>({\n            [todolistId1]: [\n                {id: v1(), title: \"Olive oil\", isDone: true},\n                {id: v1(), title: \"Canned tomatoes\", isDone: true},\n                {id: v1(), title: \"Bathroom cleaner\", isDone: false}\n            ],\n        [todolistId2]: [\n            {id: v1(), title: \"Blog post\", isDone: true},\n            {id: v1(), title: \"Edit video\", isDone: true},\n            {id: v1(), title: \"Go to swim\", isDone: false}\n        ]\n        }\n    )\n\n    const removeTask = (taskId: string, todolistId: string) => {\n        const todolistTasks = tasks[todolistId]\n        tasks[todolistId] = todolistTasks.filter(t => t.id !== taskId)\n        setTasks({...tasks})\n    }\n    const addTask = (taskTitle: string, todolistId: string) => {\n        const task = {id: v1(), title: taskTitle, isDone: false}\n        const todolistTasks = tasks[todolistId]\n        tasks[todolistId] = [task, ...todolistTasks]\n        setTasks({...tasks})\n    }\n    const changeTasksStatus = (taskId: string, newIsDone: boolean, todolistId: string) => {\n        const todolistTasks = tasks[todolistId]\n        const task = todolistTasks.find(t => t.id === taskId)\n        if (task) {\n            task.isDone = newIsDone\n            setTasks({...tasks})\n        }\n    }\n\n    const removeTodolist = (todolistId: string) => {\n        const filteredTodolist = todolists.filter(t => t.id !== todolistId)\n        setTodolists(filteredTodolist)\n    }\n    const addTodolist = (title: string) => {\n        const newTodolistId = v1()\n        const newTodolist = {id: newTodolistId, title}\n        setTodolists([newTodolist, ...todolists])\n        setTasks({...tasks, [newTodolistId]: []})\n    }\n\n    return (\n        <div className=\"App\">\n            <AddItemForm addItem={addTodolist}/>\n            {\n                todolists.map(t => {\n                    const tasksForTodolist = tasks[t.id]\n                    return <ToDoList\n                        key={t.id}\n                        id={t.id}\n                        title={t.title}\n                        tasks={tasksForTodolist}\n                        removeTask={removeTask}\n                        addTask={addTask}\n                        changeTasksStatus={changeTasksStatus}\n                        removeTodolist={removeTodolist}\n                    />\n                })\n            }\n        </div>\n    );\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}