{"version":3,"sources":["ToDoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ToDoList","props","title","tasks","map","t","type","checked","isDone","onClick","removeTask","id","App","useState","setTasks","className","taskId","tasks1","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOASaA,EAAwC,SAACC,GAClD,OACI,gCACI,6BAAKA,EAAMC,QACX,gCACI,0BACA,iDAEJ,6BAEQD,EAAME,MAAMC,KAAI,SAAAC,GAAC,OAAI,+BACjB,uBAAOC,KAAK,WAAWC,QAASF,EAAEG,SAClC,+BAAOH,EAAEH,QACT,wBAAQO,QAAS,WAAOR,EAAMS,WAAWL,EAAEM,KAA3C,iBAH0BN,EAAEM,aCTvCC,EAAM,WAAO,IAAD,EAEKC,mBAAqB,CAC3C,CAACF,GAAI,EAAGT,MAAO,YAAaM,QAAQ,GACpC,CAACG,GAAI,EAAGT,MAAO,kBAAmBM,QAAQ,GAC1C,CAACG,GAAI,EAAGT,MAAO,mBAAoBM,QAAQ,KAL1B,mBAEdL,EAFc,KAEPW,EAFO,KAarB,OACI,qBAAKC,UAAU,MAAf,SACI,cAAC,EAAD,CACIb,MAAM,gBACNC,MAAOA,EACPO,WAVO,SAACM,GAChB,IAAIC,EAASd,EAAMe,QAAO,SAAAb,GAAC,OAAIA,EAAEM,KAAOK,KACxCF,EAASG,SCNFE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.0e14a125.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {TaskType} from \"./App\";\r\n\r\ntype ToDoListPropsType = {\r\n    title: string\r\n    tasks: TaskType[]\r\n    removeTask: (taskId: number) => void\r\n}\r\n\r\nexport const ToDoList: React.FC<ToDoListPropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <h3>{props.title}</h3>\r\n            <div>\r\n                <input/>\r\n                <button>Add task</button>\r\n            </div>\r\n            <ul>\r\n                {\r\n                    props.tasks.map(t => <li key={t.id}>\r\n                        <input type=\"checkbox\" checked={t.isDone}/>\r\n                        <span>{t.title}</span>\r\n                        <button onClick={() => {props.removeTask(t.id)}}>X</button>\r\n                    </li>)\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {ToDoList} from \"./ToDoList\";\n\nexport type TaskType = {\n    id: number\n    title: string\n    isDone: boolean\n}\n\nexport const App = () => {\n\n    const [tasks, setTasks] = useState<TaskType[]>([\n        {id: 1, title: \"Olive oil\", isDone: true},\n        {id: 2, title: \"Canned tomatoes\", isDone: true},\n        {id: 3, title: \"Bathroom cleaner\", isDone: false}\n    ])\n\n    const removeTask = (taskId: number) => {\n        let tasks1 = tasks.filter(t => t.id !== taskId)\n        setTasks(tasks1)\n    }\n\n    return (\n        <div className=\"App\">\n            <ToDoList\n                title=\"Shopping List\"\n                tasks={tasks}\n                removeTask={removeTask}\n            />\n        </div>\n    );\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}