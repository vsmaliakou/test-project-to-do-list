{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","ToDoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AddItemForm","props","useState","taskTitle","setTaskTitle","error","setError","addTask","trim","addItem","value","onChange","e","currentTarget","onKeyPress","charCode","className","onClick","EditableSpan","editMode","setEditMode","title","setTitle","autoFocus","onBlur","onDoubleClick","ToDoList","newTitle","changeTodolistTitle","id","removeTodolist","tasks","map","t","isDone","type","checked","changeTasksStatus","changeTaskTitle","removeTask","App","todolistId1","v1","todolistId2","todolists","setTodolists","setTasks","taskId","todolistId","todolistTasks","filter","task","newIsDone","find","filteredTodolist","todolist","newTodolistId","tasksForTodolist","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2fdc55a3.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm: React.FC<AddItemFormPropsType> = (props) => {\r\n\r\n    const [taskTitle, setTaskTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const addTask = () => {\r\n        if (taskTitle.trim() !== \"\") {\r\n            props.addItem(taskTitle)\r\n            setTaskTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setTaskTitle(e.currentTarget.value)\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        e.charCode === 13 && addTask()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                value={taskTitle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                className={error ? \"error\" : \"\"}\r\n            />\r\n            <button onClick={addTask}>Add</button>\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newTitle: string) => void\r\n}\r\n\r\nexport const EditableSpan: React.FC<EditableSpanPropsType> = (props) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState(props.title)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <input\r\n                value={title}\r\n                autoFocus\r\n                onBlur={activateViewMode}\r\n                onChange={changeTitle}\r\n            />\r\n            : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {TaskType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\n\r\n\r\ntype ToDoListPropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: TaskType[]\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    addTask: (taskTitle: string, todolistId: string) => void\r\n    changeTasksStatus: (taskId: string, newIsDone: boolean, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    changeTodolistTitle: (todolistId: string, newTitle: string) => void\r\n}\r\n\r\n\r\nexport const ToDoList: React.FC<ToDoListPropsType> = (props) => {\r\n\r\n    const addTask = (title: string) => props.addTask(title, props.id)\r\n    const removeTodolist = () => props.removeTodolist(props.id)\r\n    const changeTodolistTitle = (newTitle: string) => props.changeTodolistTitle(props.id, newTitle)\r\n\r\n    return (\r\n        <div>\r\n            <EditableSpan title={props.title} onChange={changeTodolistTitle}/>\r\n            <button onClick={removeTodolist}>X</button>\r\n            <AddItemForm addItem={addTask}/>\r\n            <ul>\r\n                {\r\n                    props.tasks.map(t => {\r\n\r\n                        const removeTask = () => props.removeTask(t.id, props.id)\r\n                        const changeTasksStatus = (e: ChangeEvent<HTMLInputElement>) => props.changeTasksStatus(t.id, e.currentTarget.checked, props.id)\r\n                        const changeTaskTitle = (newTitle: string) => props.changeTaskTitle(t.id, newTitle, props.id)\r\n\r\n                        return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                checked={t.isDone}\r\n                                onChange={changeTasksStatus}\r\n                            />\r\n                            <EditableSpan title={t.title} onChange={changeTaskTitle}/>\r\n                            <button onClick={removeTask}>X</button>\r\n                        </li>\r\n                    })\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {ToDoList} from \"./ToDoList\";\nimport {v1} from \"uuid\";\nimport {AddItemForm} from \"./AddItemForm\";\n\nexport type ToDoListType = {\n    id: string\n    title: string\n}\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\nexport type TasksStateType = {\n    [key: string]: TaskType[]\n}\n\nexport const App = () => {\n\n    let todolistId1 = v1()\n    let todolistId2 = v1()\n\n    const [todolists, setTodolists] = useState<ToDoListType[]>([\n        {id: todolistId1, title: \"Shopping List\"},\n        {id: todolistId2, title: \"Things To Do\"}\n    ])\n    const [tasks, setTasks] = useState<TasksStateType>({\n            [todolistId1]: [\n                {id: v1(), title: \"Olive oil\", isDone: true},\n                {id: v1(), title: \"Canned tomatoes\", isDone: true},\n                {id: v1(), title: \"Bathroom cleaner\", isDone: false}\n            ],\n            [todolistId2]: [\n                {id: v1(), title: \"Blog post\", isDone: true},\n                {id: v1(), title: \"Edit video\", isDone: true},\n                {id: v1(), title: \"Go to swim\", isDone: false}\n            ]\n        }\n    )\n\n    const removeTask = (taskId: string, todolistId: string) => {\n        const todolistTasks = tasks[todolistId]\n        tasks[todolistId] = todolistTasks.filter(t => t.id !== taskId)\n        setTasks({...tasks})\n    }\n    const addTask = (taskTitle: string, todolistId: string) => {\n        const task = {id: v1(), title: taskTitle, isDone: false}\n        const todolistTasks = tasks[todolistId]\n        tasks[todolistId] = [task, ...todolistTasks]\n        setTasks({...tasks})\n    }\n    const changeTasksStatus = (taskId: string, newIsDone: boolean, todolistId: string) => {\n        const todolistTasks = tasks[todolistId]\n        const task = todolistTasks.find(t => t.id === taskId)\n        if (task) {\n            task.isDone = newIsDone\n            setTasks({...tasks})\n        }\n    }\n    const changeTaskTitle = (taskId: string, newTitle: string, todolistId: string) => {\n        const todolistTasks = tasks[todolistId]\n        const task = todolistTasks.find(t => t.id === taskId)\n        if (task) {\n            task.title = newTitle\n            setTasks({...tasks})\n        }\n    }\n\n    const removeTodolist = (todolistId: string) => {\n        const filteredTodolist = todolists.filter(t => t.id !== todolistId)\n        setTodolists(filteredTodolist)\n    }\n    const addTodolist = (title: string) => {\n        const newTodolistId = v1()\n        const newTodolist = {id: newTodolistId, title}\n        setTodolists([newTodolist, ...todolists])\n        setTasks({...tasks, [newTodolistId]: []})\n    }\n    const changeTodolistTitle = (todolistId: string, newTitle: string) => {\n        const todolist = todolists.find(t => t.id === todolistId)\n        if (todolist) {\n            todolist.title = newTitle\n            setTodolists([...todolists])\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            <AddItemForm addItem={addTodolist}/>\n            {\n                todolists.map(t => {\n                    const tasksForTodolist = tasks[t.id]\n                    return <ToDoList\n                        key={t.id}\n                        id={t.id}\n                        title={t.title}\n                        tasks={tasksForTodolist}\n                        removeTask={removeTask}\n                        addTask={addTask}\n                        changeTasksStatus={changeTasksStatus}\n                        removeTodolist={removeTodolist}\n                        changeTaskTitle={changeTaskTitle}\n                        changeTodolistTitle={changeTodolistTitle}\n                    />\n                })\n            }\n        </div>\n    );\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}