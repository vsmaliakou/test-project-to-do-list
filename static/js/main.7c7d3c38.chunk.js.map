{"version":3,"sources":["Todolist/ToDoList.module.css","Common/Search/Search.module.css","Common/AddItemForm/AddItemForm.module.css","Task/Task.module.css","Common/EditableSpan/EditableSpan.module.css","Common/Header/Header.module.css","Task/task-api.ts","Common/AddItemForm/AddItemForm.tsx","Common/EditableSpan/EditableSpan.tsx","Todolist/todolist-api.ts","Task/Task.tsx","App/app-reducer.ts","Todolist/todolists-reducer.ts","Task/tasks-reducer.ts","Todolist/ToDoList.tsx","Common/Loading/Loading.tsx","Common/Search/selectors.ts","Common/Search/Search.tsx","Common/Header/Header.tsx","App/App.tsx","reportWebVitals.ts","store.ts","index.tsx","Common/Loading/Loading.module.css"],"names":["module","exports","TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","useState","taskTitle","setTaskTitle","error","setError","addTask","trim","length","addItem","className","s","addItemForm","value","onChange","e","currentTarget","onKeyPress","charCode","placeholder","onClick","EditableSpan","editMode","setEditMode","title","setTitle","input","autoFocus","onBlur","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","id","delete","post","put","tasksAPI","todolistId","taskId","model","Task","changeTaskTitle","useCallback","newTitle","task","status","Completed","type","checked","changeTasksStatus","New","removeTask","slice","createSlice","name","initialState","reducers","setAppStatusAC","state","action","payload","setAppErrorAC","appReducer","reducer","actions","removeTodolistAC","index","findIndex","t","splice","addTodolistAC","unshift","todolist","changeTodolistTitleAC","setTodolistsAC","todolists","todolistsReducer","removeTaskAC","tasks","addTaskAC","todoListId","updateTaskAC","setTasksAC","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","dispatch","getState","find","apiModel","description","priority","startDate","deadline","then","response","data","resultCode","catch","message","console","warn","ToDoList","useDispatch","useEffect","items","changeTodolistTitle","todolistHeader","removeTodolist","map","Loading","loadingWrap","cssloadDots","cssloadDot","version","xmlns","in","result","stdDeviation","mode","values","in2","Search","allTasks","useSelector","res","Object","keys","key","prop","hasOwnProperty","tsks","selectAllTasks","display","setDisplay","filteredTasks","filter","at","toLowerCase","includes","searchContainer","style","height","overflowY","ft","search","searchNone","Header","header","App","app","removeTaskTC","item","addTaskTC","removeTodolistTC","addTodolist","addTodolistTC","changeTodolistTitleTC","tasksForTodolist","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7c7d3c38.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolist\":\"ToDoList_todolist__c_duG\",\"todolistHeader\":\"ToDoList_todolistHeader__1lk3E\",\"title\":\"ToDoList_title__1BWso\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchContainer\":\"Search_searchContainer__394EE\",\"search\":\"Search_search__10182\",\"searchNone\":\"Search_searchNone__39bun\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addItemForm\":\"AddItemForm_addItemForm__1azhY\",\"error\":\"AddItemForm_error__24L5a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskTitle\":\"Task_taskTitle__2q8f6\",\"title\":\"Task_title__2y6H7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"EditableSpan_input__SMM0g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__UG-kB\"};","import {instance} from '../Todolist/todolist-api';\r\nimport {ResponseType} from '../Todolist/todolist-api'\r\n\r\nexport const tasksAPI = {\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(taskId: string, todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(taskTitle: string, todolistId: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitle});\r\n    },\r\n    updateTask(taskId: string, model: UpdateTaskModelType, todolistId: string) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport s from './AddItemForm.module.css'\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    placeholder: string\r\n}\r\n\r\nexport const AddItemForm: React.FC<AddItemFormPropsType> = React.memo((props) => {\r\n\r\n    const [taskTitle, setTaskTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const addTask = () => {\r\n        if (taskTitle.trim() !== \"\") {\r\n            if(taskTitle.length < 20) {\r\n                props.addItem(taskTitle)\r\n                setTaskTitle(\"\")\r\n            } else {\r\n                setError(\"No more than 20 characters\")\r\n            }\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setTaskTitle(e.currentTarget.value)\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addTask()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.addItemForm}>\r\n            <input\r\n                value={taskTitle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                className={error ? \"error\" : \"\"}\r\n                placeholder={props.placeholder}\r\n            />\r\n            <button onClick={addTask}>Add</button>\r\n            {error && <div className={s.error}>{error}</div>}\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './EditableSpan.module.css'\r\n\r\ntype EditableSpanPropsType = {\r\n    className: string\r\n    title: string\r\n    onChange: (newTitle: string) => void\r\n}\r\n\r\nexport const EditableSpan: React.FC<EditableSpanPropsType> = React.memo((props) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState(props.title)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <input\r\n                className={s.input}\r\n                value={title}\r\n                autoFocus\r\n                onBlur={activateViewMode}\r\n                onChange={changeTitle}\r\n            />\r\n            : <span className={props.className} onDoubleClick={activateEditMode}>{props.title}</span>\r\n    )\r\n})","import axios from 'axios'\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '15f7a0a9-64c3-4a6a-9f8f-a55a7d8541a6'\r\n    }\r\n})\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>('todo-lists');\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title});\r\n    }\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport s from './Task.module.css'\r\nimport {EditableSpan} from \"../Common/EditableSpan/EditableSpan\";\r\nimport {TaskStatuses, TaskType} from \"./task-api\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeTasksStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todolistId: string) => void\r\n}\r\n\r\nexport const Task: React.FC<TaskPropsType> = (props) => {\r\n    const removeTask = () => props.removeTask(props.task.id, props.todolistId)\r\n    const changeTasksStatus = (e: ChangeEvent<HTMLInputElement>) => props.changeTasksStatus(props.task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    const changeTaskTitle = useCallback((newTitle: string) => props.changeTaskTitle(props.task.id, newTitle, props.todolistId), [props.task.id, props.changeTaskTitle, props.todolistId])\r\n\r\n    return <div className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n        <div className={s.taskTitle}>\r\n            <div>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={props.task.status === TaskStatuses.Completed}\r\n                    onChange={changeTasksStatus}\r\n                />\r\n                <EditableSpan className={s.title} title={props.task.title} onChange={changeTaskTitle}/>\r\n            </div>\r\n            <button onClick={removeTask}>X</button>\r\n        </div>\r\n    </div>\r\n}","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'loading' as RequestStatusType,\r\n    error: null as string | null\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC: (state, action: PayloadAction<{status: RequestStatusType}>) => {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC: (state, action: PayloadAction<{error: string | null}>) => {\r\n            state.error = action.payload.error\r\n        }\r\n    }\r\n})\r\nexport const appReducer = slice.reducer\r\n\r\nexport const {setAppStatusAC, setAppErrorAC} = slice.actions","import {ToDoListType} from \"../App/App\";\r\nimport {todolistsAPI, TodolistType} from \"./todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"../App/app-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<ToDoListType> = []\r\n\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState,\r\n    reducers: {\r\n        removeTodolistAC: (state, action: PayloadAction<{ todolistId: string }>) => {\r\n            const index = state.findIndex(t => t.id === action.payload.todolistId)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        },\r\n        addTodolistAC: (state, action: PayloadAction<{ todolist: TodolistType }>) => {\r\n            state.unshift({...action.payload.todolist})\r\n        },\r\n        changeTodolistTitleAC: (state, action: PayloadAction<{ todolistId: string, newTitle: string }>) => {\r\n            const index = state.findIndex(t => t.id === action.payload.todolistId)\r\n            state[index].title = action.payload.newTitle\r\n        },\r\n        setTodolistsAC: (state, action: PayloadAction<{ todolists: Array<TodolistType> }>) => {\r\n            return action.payload.todolists\r\n        }\r\n    }\r\n})\r\nexport const todolistsReducer = slice.reducer\r\n\r\nexport const {removeTodolistAC, addTodolistAC, changeTodolistTitleAC, setTodolistsAC} = slice.actions\r\n\r\nexport const fetchTodolistsTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.getTodolists()\r\n        .then(response => {\r\n            dispatch(setTodolistsAC({todolists: response.data}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppErrorAC(error.message))\r\n            dispatch(setAppStatusAC({status: 'failed'}))\r\n        })\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.deleteTodolist(todolistId)\r\n        .then(response => {\r\n            dispatch(removeTodolistAC({todolistId}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppErrorAC(error.message))\r\n            dispatch(setAppStatusAC({status: 'failed'}))\r\n        })\r\n}\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.createTodolist(title)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(addTodolistAC({todolist: response.data.data.item}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n                dispatch(setAppStatusAC({status: 'failed'}))\r\n            }\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppErrorAC(error.message))\r\n            dispatch(setAppStatusAC({status: 'failed'}))\r\n        })\r\n}\r\nexport const changeTodolistTitleTC = (todolistId: string, newTitle: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.updateTodolist(todolistId, newTitle)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(changeTodolistTitleAC({todolistId, newTitle}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n                dispatch(setAppStatusAC({status: 'failed'}))\r\n            }\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppErrorAC(error.message))\r\n            dispatch(setAppStatusAC({status: 'failed'}))\r\n        })\r\n}\r\n","import {TasksStateType} from \"../App/App\";\r\nimport {addTodolistAC, removeTodolistAC, setTodolistsAC} from \"../Todolist/todolists-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {tasksAPI, TaskType, UpdateTaskModelType} from \"./task-api\";\r\nimport {AppRootStateType} from \"../store\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"../App/app-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {TodolistType} from \"../Todolist/todolist-api\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {\r\n        removeTaskAC: (state, action: PayloadAction<{ taskId: string, todolistId: string }>) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        },\r\n        addTaskAC: (state, action: PayloadAction<{ task: TaskType }>) => {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        },\r\n        updateTaskAC: (state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        },\r\n        setTasksAC: (state, action: PayloadAction<{ tasks: Array<TaskType>, todolistId: string }>) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        })\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.todolistId]\r\n        })\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todolists.forEach((t: TodolistType) => state[t.id] = [])\r\n        })\r\n    }\r\n})\r\nexport const tasksReducer = slice.reducer\r\n\r\nexport const {removeTaskAC, addTaskAC, updateTaskAC, setTasksAC} = slice.actions\r\n\r\nexport const fetchTaskTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    tasksAPI.getTasks(todolistId)\r\n        .then(response => {\r\n            dispatch(setTasksAC({tasks: response.data.items, todolistId}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppErrorAC(error.message))\r\n            dispatch(setAppStatusAC({status: 'failed'}))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    tasksAPI.deleteTask(taskId, todolistId)\r\n        .then(response => {\r\n            dispatch(removeTaskAC({taskId, todolistId}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppErrorAC(error.message))\r\n            dispatch(setAppStatusAC({status: 'failed'}))\r\n        })\r\n}\r\nexport const addTaskTC = (taskTitle: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    tasksAPI.createTask(taskTitle, todolistId)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(addTaskAC({task: response.data.data.item}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n                dispatch(setAppStatusAC({status: 'failed'}))\r\n            }\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppErrorAC(error.message))\r\n            dispatch(setAppStatusAC({status: 'failed'}))\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    const state = getState()\r\n    const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n    if (!task) {\r\n        console.warn(\"task not found in the state\")\r\n        return\r\n    }\r\n    const apiModel: UpdateTaskModelType = {\r\n        title: task.title,\r\n        description: task.description,\r\n        status: task.status,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        deadline: task.deadline\r\n    }\r\n\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    tasksAPI.updateTask(taskId, apiModel, todolistId)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(updateTaskAC({taskId, model, todolistId}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n                dispatch(setAppStatusAC({status: 'failed'}))\r\n            }\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppErrorAC(error.message))\r\n            dispatch(setAppStatusAC({status: 'failed'}))\r\n        })\r\n}\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport s from './ToDoList.module.css'\r\nimport {AddItemForm} from \"../Common/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../Common/EditableSpan/EditableSpan\";\r\nimport {Task} from \"../Task/Task\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTaskTC} from \"../Task/tasks-reducer\";\r\nimport {TaskStatuses, TaskType} from \"../Task/task-api\";\r\n\r\ntype ToDoListPropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: TaskType[]\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    addTask: (taskTitle: string, todolistId: string) => void\r\n    changeTasksStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    changeTodolistTitle: (todolistId: string, newTitle: string) => void\r\n}\r\n\r\nexport const ToDoList: React.FC<ToDoListPropsType> = React.memo((props) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTaskTC(props.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => props.addTask(title, props.id), [props.addTask, props.id])\r\n    const removeTodolist = () => props.removeTodolist(props.id)\r\n    const changeTodolistTitle = useCallback((newTitle: string) => props.changeTodolistTitle(props.id, newTitle), [props.changeTodolistTitle, props.id])\r\n\r\n    return (\r\n        <div className={s.todolist}>\r\n            <div className={s.todolistHeader}>\r\n                <EditableSpan className={s.title} title={props.title} onChange={changeTodolistTitle}/>\r\n                <button onClick={removeTodolist}>X</button>\r\n            </div>\r\n            <AddItemForm addItem={addTask} placeholder=\"Task title\"/>\r\n            <ul>\r\n                {\r\n                    props.tasks.map(t => <Task\r\n                            key={t.id}\r\n                            task={t}\r\n                            todolistId={props.id}\r\n                            removeTask={props.removeTask}\r\n                            changeTasksStatus={props.changeTasksStatus}\r\n                            changeTaskTitle={props.changeTaskTitle}\r\n                        />\r\n                    )\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n})","import React from 'react';\r\nimport s from './Loading.module.css'\r\n\r\nexport const Loading = () => {\r\n    return (\r\n\r\n        <div className={s.loadingWrap}>\r\n            <div className={s.cssloadDots}>\r\n                <div className={s.cssloadDot}></div>\r\n                <div className={s.cssloadDot}></div>\r\n                <div className={s.cssloadDot}></div>\r\n                <div className={s.cssloadDot}></div>\r\n                <div className={s.cssloadDot}></div>\r\n            </div>\r\n\r\n            <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <defs>\r\n                    <filter id=\"goo\">\r\n                        <feGaussianBlur in=\"SourceGraphic\" result=\"blur\" stdDeviation=\"12\" ></feGaussianBlur>\r\n                        <feColorMatrix in=\"blur\" mode=\"matrix\" values=\"1 0 0 0 0\t0 1 0 0 0\t0 0 1 0 0\t0 0 0 18 -7\" result=\"goo\" ></feColorMatrix>\r\n                        <feBlend in2=\"goo\" in=\"SourceGraphic\" result=\"mix\" ></feBlend>\r\n                    </filter>\r\n                </defs>\r\n            </svg>\r\n        </div>\r\n    )\r\n}","import {AppRootStateType} from \"../../store\";\r\nimport {TaskType} from \"../../Task/task-api\";\r\n\r\nfunction hasOwnProperty<X extends {}, Y extends PropertyKey>\r\n(obj: X, prop: Y): obj is X & Record<Y, unknown> {\r\n    return obj.hasOwnProperty(prop)\r\n}\r\n\r\nexport const selectAllTasks = (state: AppRootStateType): TaskType[] => {\r\n    let res: TaskType[] = [];\r\n    Object.keys(state.tasks).forEach((key: string) => {\r\n        if (hasOwnProperty(state.tasks, key)) {\r\n            let tsks = state.tasks[key] as TaskType[];\r\n            res = [...res, ...tsks]\r\n        }\r\n    })\r\n    return res;\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './Search.module.css'\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectAllTasks} from \"./selectors\";\r\nimport {AppRootStateType} from \"../../store\";\r\n\r\nexport const Search = () => {\r\n\r\n    const allTasks = useSelector((state: AppRootStateType) => selectAllTasks(state))\r\n\r\n    const [taskTitle, setTaskTitle] = useState('')\r\n    const [display, setDisplay] = useState(false)\r\n\r\n    const filteredTasks = allTasks.filter(at => {\r\n        return at.title.toLowerCase().includes(taskTitle.toLowerCase())\r\n    })\r\n\r\n    const searchTaskTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTaskTitle(e.currentTarget.value)\r\n        setDisplay(true)\r\n    }\r\n\r\n    return (\r\n        <div className={s.searchContainer}>\r\n            <input type={'text'}\r\n                   placeholder='Search...'\r\n                   onChange={searchTaskTitle}\r\n                   onBlur={() => {\r\n                       taskTitle === \"\" && setDisplay(false)\r\n                   }}\r\n            />\r\n\r\n                <div style={{height: '450px', overflowY: \"auto\"}}>\r\n                    {\r\n                        filteredTasks.map(ft => <div\r\n                            className={display ? `${s.search}` : `${s.searchNone}`}>{ft.title}</div>)\r\n                    }\r\n                </div>\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Header.module.css'\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <div className={s.header}>\r\n            <span>To Do List</span>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {ToDoList} from \"../Todolist/ToDoList\";\r\nimport {AddItemForm} from \"../Common/AddItemForm/AddItemForm\";\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    removeTodolistTC\r\n} from \"../Todolist/todolists-reducer\";\r\nimport {\r\n    removeTaskTC,\r\n    addTaskTC, updateTaskTC\r\n} from \"../Task/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../store\";\r\nimport {TaskStatuses, TaskType} from \"../Task/task-api\";\r\nimport {RequestStatusType} from \"./app-reducer\";\r\nimport {Loading} from \"../Common/Loading/Loading\";\r\nimport {Search} from \"../Common/Search/Search\";\r\nimport { Header } from '../Common/Header/Header';\r\n\r\nexport type ToDoListType = {\r\n    id: string\r\n    title: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nexport const App = () => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<ToDoListType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const removeTask = useCallback((taskId: string, todolistId: string) => {\r\n        dispatch(removeTaskTC(taskId, todolistId))\r\n    }, [])\r\n    const addTask = useCallback((taskTitle: string, todolistId: string) => {\r\n        dispatch(addTaskTC(taskTitle, todolistId))\r\n    }, [])\r\n    const changeTasksStatus = useCallback((taskId: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskTC(taskId, {status}, todolistId))\r\n    }, [])\r\n    const changeTaskTitle = useCallback((taskId: string, title: string, todolistId: string) => {\r\n        dispatch(updateTaskTC(taskId, {title}, todolistId))\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(removeTodolistTC(todolistId))\r\n    }, [])\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n    }, [])\r\n    const changeTodolistTitle = useCallback((todolistId: string, newTitle: string) => {\r\n        dispatch(changeTodolistTitleTC(todolistId, newTitle))\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header/>\r\n            <div className=\"app-container\">\r\n                <Search/>\r\n                <div className=\"app-content\">\r\n                    <AddItemForm addItem={addTodolist} placeholder=\"Todolist title\"/>\r\n                    <div className=\"app-todolists\">\r\n                        {\r\n                            todolists.map(t => {\r\n                                const tasksForTodolist = tasks[t.id]\r\n                                return <ToDoList\r\n                                    key={t.id}\r\n                                    id={t.id}\r\n                                    title={t.title}\r\n                                    tasks={tasksForTodolist}\r\n                                    removeTask={removeTask}\r\n                                    addTask={addTask}\r\n                                    changeTasksStatus={changeTasksStatus}\r\n                                    removeTodolist={removeTodolist}\r\n                                    changeTaskTitle={changeTaskTitle}\r\n                                    changeTodolistTitle={changeTodolistTitle}\r\n                                />\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {status === \"loading\" && <Loading/>}\r\n            {error && <div>{error}</div>}\r\n        </div>\r\n    )\r\n}","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {tasksReducer} from './Task/tasks-reducer';\r\nimport {todolistsReducer} from './Todolist/todolists-reducer';\r\nimport {combineReducers} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./App/app-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loadingWrap\":\"Loading_loadingWrap__3Oauo\",\"cssloadDots\":\"Loading_cssloadDots__L69ls\",\"cssloadDot\":\"Loading_cssloadDot__4ceA2\",\"cssload-dot-colors\":\"Loading_cssload-dot-colors__3Y3qe\",\"cssload-dot-rotate-1\":\"Loading_cssload-dot-rotate-1__LYv1g\",\"cssload-dot-move\":\"Loading_cssload-dot-move__mj87V\",\"cssload-dot-rotate-2\":\"Loading_cssload-dot-rotate-2__1yaub\",\"cssload-dot-rotate-3\":\"Loading_cssload-dot-rotate-3__1d8uA\",\"cssload-dot-rotate-4\":\"Loading_cssload-dot-rotate-4__1jLBX\"};"],"sourceRoot":""}