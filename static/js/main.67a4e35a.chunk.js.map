{"version":3,"sources":["ToDoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ToDoList","props","useState","taskTitle","setTaskTitle","addTask","title","value","onChange","e","currentTarget","onKeyPress","charCode","onClick","tasks","map","t","type","checked","isDone","removeTask","id","App","v1","setTasks","className","taskId","tasks1","filter","newTasks","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mQAWaA,EAAwC,SAACC,GAAW,IAAD,EAE1BC,mBAAiB,IAFS,mBAErDC,EAFqD,KAE1CC,EAF0C,KAItDC,EAAU,WACZJ,EAAMI,QAAQF,GACdC,EAAa,KAKjB,OACI,gCACI,6BAAKH,EAAMK,QACX,gCACI,uBACIC,MAAOJ,EACPK,SATQ,SAACC,GAAD,OAAsCL,EAAaK,EAAEC,cAAcH,QAU3EI,WATU,SAACF,GAAD,OAAuD,KAAfA,EAAEG,UAAmBP,OAW3E,wBAAQQ,QAASR,EAAjB,yBAEJ,6BAEQJ,EAAMa,MAAMC,KAAI,SAAAC,GAIZ,OAAO,+BACH,uBAAOC,KAAK,WAAWC,QAASF,EAAEG,SAClC,+BAAOH,EAAEV,QACT,wBAAQO,QALO,kBAAMZ,EAAMmB,WAAWJ,EAAEK,KAKxC,iBAHYL,EAAEK,a,QC5B7BC,EAAM,WAAO,IAAD,EAEKpB,mBAAqB,CAC3C,CAACmB,GAAIE,cAAMjB,MAAO,YAAaa,QAAQ,GACvC,CAACE,GAAIE,cAAMjB,MAAO,kBAAmBa,QAAQ,GAC7C,CAACE,GAAIE,cAAMjB,MAAO,mBAAoBa,QAAQ,KAL7B,mBAEdL,EAFc,KAEPU,EAFO,KAkBrB,OACI,qBAAKC,UAAU,MAAf,SACI,cAAC,EAAD,CACInB,MAAM,gBACNQ,MAAOA,EACPM,WAfO,SAACM,GAChB,IAAIC,EAASb,EAAMc,QAAO,SAAAZ,GAAC,OAAIA,EAAEK,KAAOK,KACxCF,EAASG,IAcDtB,QAZI,SAACF,GACb,IACI0B,EAAQ,CADD,CAACR,GAAIE,cAAMjB,MAAOH,EAAWgB,QAAQ,IACpC,mBAAaL,IACzBU,EAASK,SCZFC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.67a4e35a.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {TaskType} from \"./App\";\r\n\r\ntype ToDoListPropsType = {\r\n    title: string\r\n    tasks: TaskType[]\r\n    removeTask: (taskId: string) => void\r\n    addTask: (taskTitle: string) => void\r\n}\r\n\r\n\r\nexport const ToDoList: React.FC<ToDoListPropsType> = (props) => {\r\n\r\n    const [taskTitle, setTaskTitle] = useState<string>(\"\")\r\n\r\n    const addTask = () => {\r\n        props.addTask(taskTitle)\r\n        setTaskTitle(\"\")\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setTaskTitle(e.currentTarget.value)\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => e.charCode === 13 && addTask()\r\n\r\n    return (\r\n        <div>\r\n            <h3>{props.title}</h3>\r\n            <div>\r\n                <input\r\n                    value={taskTitle}\r\n                    onChange={onChangeHandler}\r\n                    onKeyPress={onKeyPressHandler}\r\n                />\r\n                <button onClick={addTask}>Add task</button>\r\n            </div>\r\n            <ul>\r\n                {\r\n                    props.tasks.map(t => {\r\n\r\n                        const removeTask = () => props.removeTask(t.id)\r\n\r\n                        return <li key={t.id}>\r\n                            <input type=\"checkbox\" checked={t.isDone}/>\r\n                            <span>{t.title}</span>\r\n                            <button onClick={removeTask}>X</button>\r\n                        </li>\r\n                    })\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {ToDoList} from \"./ToDoList\";\nimport {v1} from \"uuid\";\n\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\n\nexport const App = () => {\n\n    const [tasks, setTasks] = useState<TaskType[]>([\n        {id: v1(), title: \"Olive oil\", isDone: true},\n        {id: v1(), title: \"Canned tomatoes\", isDone: true},\n        {id: v1(), title: \"Bathroom cleaner\", isDone: false}\n    ])\n\n    const removeTask = (taskId: string) => {\n        let tasks1 = tasks.filter(t => t.id !== taskId)\n        setTasks(tasks1)\n    }\n    const addTask = (taskTitle: string) => {\n        let task = {id: v1(), title: taskTitle, isDone: false}\n        let newTasks = [task, ...tasks]\n        setTasks(newTasks)\n    }\n\n    return (\n        <div className=\"App\">\n            <ToDoList\n                title=\"Shopping List\"\n                tasks={tasks}\n                removeTask={removeTask}\n                addTask={addTask}\n            />\n        </div>\n    );\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}