{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Task.tsx","ToDoList.tsx","todolists-reducer.ts","tasks-reducer.ts","App.tsx","reportWebVitals.ts","store.ts","index.tsx"],"names":["AddItemForm","React","memo","props","useState","taskTitle","setTaskTitle","error","setError","addTask","trim","addItem","value","onChange","e","currentTarget","onKeyPress","charCode","className","onClick","EditableSpan","editMode","setEditMode","title","setTitle","autoFocus","onBlur","onDoubleClick","Task","changeTaskTitle","useCallback","newTitle","task","id","todolistId","isDone","type","checked","changeTasksStatus","removeTask","ToDoList","changeTodolistTitle","removeTodolist","tasks","map","t","initialState","App","todolists","useSelector","state","dispatch","useDispatch","taskId","removeTaskAC","addTaskAC","newIsDone","changeTasksStatusAC","changeTasksTitleAC","removeTodolistAC","addTodolist","v1","addTodolistAC","changeTodolistTitleAC","tasksForTodolist","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","stateCopy","filter","newTask","todolist","find","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.45a38c48.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm: React.FC<AddItemFormPropsType> = React.memo((props) => {\r\n\r\n    const [taskTitle, setTaskTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const addTask = () => {\r\n        if (taskTitle.trim() !== \"\") {\r\n            props.addItem(taskTitle)\r\n            setTaskTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setTaskTitle(e.currentTarget.value)\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addTask()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                value={taskTitle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                className={error ? \"error\" : \"\"}\r\n            />\r\n            <button onClick={addTask}>Add</button>\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newTitle: string) => void\r\n}\r\n\r\nexport const EditableSpan: React.FC<EditableSpanPropsType> = React.memo((props) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState(props.title)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <input\r\n                value={title}\r\n                autoFocus\r\n                onBlur={activateViewMode}\r\n                onChange={changeTitle}\r\n            />\r\n            : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n    )\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {TaskType} from \"./App\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeTasksStatus: (taskId: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todolistId: string) => void\r\n}\r\n\r\nexport const Task: React.FC<TaskPropsType> = (props) => {\r\n    const removeTask = () => props.removeTask(props.task.id, props.todolistId)\r\n    const changeTasksStatus = (e: ChangeEvent<HTMLInputElement>) => props.changeTasksStatus(props.task.id, e.currentTarget.checked, props.todolistId)\r\n    const changeTaskTitle = useCallback((newTitle: string) => props.changeTaskTitle(props.task.id, newTitle, props.todolistId), [props.task.id, props.changeTaskTitle, props.todolistId])\r\n\r\n    return <li className={props.task.isDone ? \"is-done\" : \"\"}>\r\n        <input\r\n            type=\"checkbox\"\r\n            checked={props.task.isDone}\r\n            onChange={changeTasksStatus}\r\n        />\r\n        <EditableSpan title={props.task.title} onChange={changeTaskTitle}/>\r\n        <button onClick={removeTask}>X</button>\r\n    </li>\r\n}","import React, {useCallback} from \"react\";\r\nimport {TaskType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Task} from \"./Task\";\r\n\r\n\r\ntype ToDoListPropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: TaskType[]\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    addTask: (taskTitle: string, todolistId: string) => void\r\n    changeTasksStatus: (taskId: string, newIsDone: boolean, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    changeTodolistTitle: (todolistId: string, newTitle: string) => void\r\n}\r\n\r\n\r\nexport const ToDoList: React.FC<ToDoListPropsType> = React.memo((props) => {\r\n\r\n    const addTask = useCallback((title: string) => props.addTask(title, props.id), [props.addTask, props.id])\r\n    const removeTodolist = () => props.removeTodolist(props.id)\r\n    const changeTodolistTitle = useCallback((newTitle: string) => props.changeTodolistTitle(props.id, newTitle), [props.changeTodolistTitle, props.id])\r\n\r\n    return (\r\n        <div>\r\n            <EditableSpan title={props.title} onChange={changeTodolistTitle}/>\r\n            <button onClick={removeTodolist}>X</button>\r\n            <AddItemForm addItem={addTask}/>\r\n            <ul>\r\n                {\r\n                    props.tasks.map(t => <Task\r\n                            key={t.id}\r\n                            task={t}\r\n                            todolistId={props.id}\r\n                            removeTask={props.removeTask}\r\n                            changeTasksStatus={props.changeTasksStatus}\r\n                            changeTaskTitle={props.changeTaskTitle}\r\n                        />\r\n                    )\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n})","import {ToDoListType} from \"./App\";\r\nimport {v1} from \"uuid\";\r\n\r\ntype TodolistActionType = ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n\r\nconst initialState: Array<ToDoListType> = []\r\n\r\nexport const todolistsReducer = (state = initialState, action: TodolistActionType): Array<ToDoListType> => {\r\n    switch (action.type) {\r\n        case 'TEST/TODOLIST/REMOVE-TODOLIST':\r\n            return state.filter(t => t.id !== action.todolistId)\r\n        case 'TEST/TODOLIST/ADD-TODOLIST':\r\n            return [{\r\n                id: action.todolistId,\r\n                title: action.title\r\n            }, ...state]\r\n        case 'TEST/TODOLIST/CHANGE-TODOLIST-TITLE':\r\n            const todolist = state.find(t => t.id === action.todolistId)\r\n            if (todolist) {\r\n                todolist.title = action.newTitle\r\n            }\r\n            return [ ...state]\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string) => ({type: 'TEST/TODOLIST/REMOVE-TODOLIST', todolistId} as const)\r\nexport const addTodolistAC = (title: string) => ({type: 'TEST/TODOLIST/ADD-TODOLIST', title, todolistId: v1()} as const)\r\nexport const changeTodolistTitleAC = (todolistId: string, newTitle: string) => ({type: 'TEST/TODOLIST/CHANGE-TODOLIST-TITLE', todolistId, newTitle} as const)","import {TasksStateType} from \"./App\";\r\nimport {v1} from \"uuid\";\r\nimport {addTodolistAC, removeTodolistAC} from \"./todolists-reducer\";\r\n\r\ntype TodolistActionType = ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof changeTasksStatusAC>\r\n    | ReturnType<typeof changeTasksTitleAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof removeTodolistAC>\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state = initialState, action: TodolistActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'TEST/TASKS/REMOVE-TASK':{\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId]\r\n            stateCopy[action.todolistId] = tasks.filter(t => t.id !== action.taskId)\r\n            return stateCopy\r\n        }\r\n        case 'TEST/TASK/ADD-TASK':{\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId]\r\n            const newTask = {id: v1(), title: action.taskTitle, isDone: false}\r\n            stateCopy[action.todolistId] = [newTask, ...tasks]\r\n            return stateCopy\r\n        }\r\n        case 'TEST/TASK/CHANGE-TASK-STATUS': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId]\r\n            const task = tasks.map(t => t.id === action.taskId ? {...t, isDone: action.newIsDone} : t)\r\n            stateCopy[action.todolistId] = task\r\n            return stateCopy\r\n        }\r\n        case 'TEST/TASK/CHANGE-TASK-TITLE': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId]\r\n            const task = tasks.map(t => t.id === action.taskId ? {...t, title: action.newTitle} : t)\r\n            stateCopy[action.todolistId] = task\r\n            // const task = tasks.find(t => t.id === action.taskId)\r\n            // if (task) {\r\n            //     task.title = action.newTitle\r\n            // }\r\n            return stateCopy\r\n        }\r\n        case 'TEST/TODOLIST/ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        }\r\n        case 'TEST/TODOLIST/REMOVE-TODOLIST': {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.todolistId]\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'TEST/TASKS/REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (taskTitle: string, todolistId: string) => ({type: 'TEST/TASK/ADD-TASK', taskTitle, todolistId} as const)\r\nexport const changeTasksStatusAC = (taskId: string, newIsDone: boolean, todolistId: string) => ({type: 'TEST/TASK/CHANGE-TASK-STATUS', taskId, newIsDone, todolistId} as const)\r\nexport const changeTasksTitleAC = (taskId: string, newTitle: string, todolistId: string) => ({type: 'TEST/TASK/CHANGE-TASK-TITLE', taskId, newTitle, todolistId} as const)","import React, {useCallback} from 'react';\nimport './App.css';\nimport {ToDoList} from \"./ToDoList\";\nimport {AddItemForm} from \"./AddItemForm\";\nimport {addTodolistAC, changeTodolistTitleAC, removeTodolistAC} from \"./todolists-reducer\";\nimport {addTaskAC, changeTasksStatusAC, changeTasksTitleAC, removeTaskAC} from \"./tasks-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./store\";\n\nexport type ToDoListType = {\n    id: string\n    title: string\n}\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\nexport type TasksStateType = {\n    [key: string]: TaskType[]\n}\n\nexport const App = () => {\n\n    const todolists = useSelector<AppRootStateType, Array<ToDoListType>>(state => state.todolists)\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\n\n    const dispatch = useDispatch()\n\n    const removeTask = useCallback((taskId: string, todolistId: string) => {\n        dispatch(removeTaskAC(taskId, todolistId))\n    }, [])\n    const addTask = useCallback((taskTitle: string, todolistId: string) => {\n        dispatch(addTaskAC(taskTitle, todolistId))\n    }, [])\n    const changeTasksStatus = useCallback((taskId: string, newIsDone: boolean, todolistId: string) => {\n        dispatch(changeTasksStatusAC(taskId, newIsDone, todolistId))\n    }, [])\n    const changeTaskTitle = useCallback((taskId: string, newTitle: string, todolistId: string) => {\n        dispatch(changeTasksTitleAC(taskId, newTitle, todolistId))\n    }, [])\n\n    const removeTodolist = useCallback((todolistId: string) => {\n        dispatch(removeTodolistAC(todolistId))\n    }, [])\n    const addTodolist = useCallback((title: string) => {\n        dispatch(addTodolistAC(title))\n    }, [])\n    const changeTodolistTitle = useCallback((todolistId: string, newTitle: string) => {\n        dispatch(changeTodolistTitleAC(todolistId, newTitle))\n    }, [])\n\n    return (\n        <div className=\"App\">\n            <AddItemForm addItem={addTodolist}/>\n            {\n                todolists.map(t => {\n                    const tasksForTodolist = tasks[t.id]\n                    return <ToDoList\n                        key={t.id}\n                        id={t.id}\n                        title={t.title}\n                        tasks={tasksForTodolist}\n                        removeTask={removeTask}\n                        addTask={addTask}\n                        changeTasksStatus={changeTasksStatus}\n                        removeTodolist={removeTodolist}\n                        changeTaskTitle={changeTaskTitle}\n                        changeTodolistTitle={changeTodolistTitle}\n                    />\n                })\n            }\n        </div>\n    )\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}